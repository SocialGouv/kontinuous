apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: {{ or .Values.component .Chart.Name }}
  name: {{ or .Values.component .Chart.Name }}
  {{ if ne .Release.Namespace "default" }}
  namespace: "{{ .Release.Namespace }}"
  {{ end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      component: {{ or .Values.component .Chart.Name }}
  template:
    metadata:
      labels:
        component: {{ or .Values.component .Chart.Name }}
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: {{ or .Values.component .Chart.Name }}-config
        - name: artifacts
          persistentVolumeClaim:
            claimName: artifacts
        {{ if .Values.reloadableTokensSecret.enabled }}
        - name: reloadable-tokens-secret
          secret:
            secretName: {{ .Values.reloadableTokensSecret.name }}
        {{ end }}
        {{ range $secret := .Values.rootKubeconfigSecrets }}
        - name: secret-root-kubeconfig-{{ $secret.name }}
          secret:
            secretName: {{ $secret.name }}
            items:
            - key: {{ or $secret.key "KUBECONFIG" }}
              path: kubeconfig
        {{ end }}
        {{ range $secret := .Values.kubeconfigSecrets }}
        - name: secret-kubeconfig-{{ $secret.name }}
          secret:
            secretName: {{ $secret.name }}
            items:
            - key: {{ or $secret.key "KUBECONFIG" }}
              path: kubeconfig
        {{ end }}
        {{ range $secret := .Values.tokenSecrets }}
        - name: secret-token-{{ $secret.name }}
          secret:
            secretName: {{ $secret.name }}
            items:
            - key: {{ or $secret.key "TOKEN" }}
              path: token
        {{ end }}
        {{ range $repository := .Values.repositories }}
        - name: repository-deploy-{{ $repository.repository | adler32sum }}
          secret:
            {{ if or $repository.deployKeySecretName $repository.deployKeySecretName }}
            secretName: {{ or $repository.deployKeySecretName $repository.deployKeySecretName }}
            {{ else if $repository.private }}
            secretName: "deploy-key-{{ $repository.project }}"
            {{ end }}
            items:
            - key: DEPLOY_KEY
              path: deploy-key            
        {{ end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
        - name: webhook
          image: {{ .Values.image }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{ .Values.containerPort }}
              name: http
          volumeMounts:
            - name: config-volume
              mountPath: /app/config.yaml
              subPath: config.yaml
            - name: artifacts
              mountPath: /artifacts
            {{ if .Values.reloadableTokensSecret.enabled }}
            - name: reloadable-tokens-secret
              mountPath: /secrets/tokens
            {{ end }}
            {{ range $secret := .Values.rootKubeconfigSecrets }}
            - name: secret-root-kubeconfig-{{ $secret.name }}
              mountPath: /secrets/projects/{{ or $secret.project $secret.name }}/root-kubeconfig/{{ $secret.cluster }}
            {{ end }}
            {{ range $secret := .Values.kubeconfigSecrets }}
            - name: secret-kubeconfig-{{ $secret.name }}
              mountPath: /secrets/projects/{{ or $secret.project $secret.name }}/kubeconfig/{{ $secret.cluster }}
            {{ end }}
            {{ range $index, $secret := .Values.tokenSecrets }}
            - name: secret-token-{{ $secret.name }}
              mountPath: /secrets/projects/{{ or $secret.project $secret.name }}/tokens/{{ or $secret.tokenId $index }}
            {{ end }}
            {{ range $repository := .Values.repositories }}
            - name: repository-deploy-{{ $repository.repository | adler32sum }}
              mountPath: "/secrets/projects/{{ $repository.project }}/repositories/{{ $repository.repository | adler32sum }}/ssh"
            {{ end }}
          env:
            - name: KUBEWEBHOOK_CONFIG_PATH
              value: /app/config.yaml
            - name: KUBEWEBHOOK_EXPOSED_HOST
              value: "{{ .Values.host }}"
            - name: KUBEWEBHOOK_EXPOSED_HTTPS
              value: "true"
            - name: KUBEWEBHOOK_EXPOSED_PORT
              value: "443"
            - name: KUBEWEBHOOK_HTTPLOGGER_IGNOREUSERAGENTS
              value: "{{ .Values.httpLogger.ignoreUserAgents | join "," }}"
            - name: KUBEWEBHOOK_PIPELINE_CHECKOUT_IMAGE
              value: {{ .Values.pipelineCheckoutImage }}
            - name: KUBEWEBHOOK_PIPELINE_CHECKOUT_IMAGE_TAG
              value: {{ .Values.pipelineCheckoutImageTag }}
            - name: KUBEWEBHOOK_PIPELINE_IMAGE
              value: {{ .Values.pipelineImage }}
            - name: KUBEWEBHOOK_PIPELINE_IMAGE_TAG
              value: {{ .Values.pipelineImageTag }}
            {{ if .Values.rootTokenSecret }}
            - name: KUBEWEBHOOK_SUPERTOKEN
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.rootTokenSecretKey }}
                  name: {{ .Values.rootTokenSecret }}
            {{ end }}
            - name: KUBEWEBHOOK_CI_NAMESPACE_ALLOW_ALL
              value: "{{ .Values.ciNamespace.allowAll }}"
            - name: KUBEWEBHOOK_CI_NAMESPACE_TEMPLATE
              value: "{{ .Values.ciNamespace.template }}"
            - name: KUBEWEBHOOK_CI_NAMESPACE_SERVICE_ACCOUNT_NAME_DEFAULT
              value: "{{ .Values.ciNamespace.serviceAccountNameDefault }}"
            - name: KUBEWEBHOOK_CI_NAMESPACE_MOUNT_KUBECONFIG_DEFAULT
              value: "{{ .Values.ciNamespace.mountKubeconfigDefault }}"
            - name: KUBEWEBHOOK_CI_NAMESPACE_KUBECONFIG_SECRET_NAME
              value: "{{ .Values.ciNamespace.kubeconfigSecretName }}"
            - name: KUBEWEBHOOK_CI_NAMESPACE_KUBECONFIG_SECRET_NAME
              value: "{{ .Values.ciNamespace.mountSecretsDefault | toJson }}"
            - name: KUBEWEBHOOK_SURVIVE_ON_BROKEN_CLUSTER
              value: "{{ .Values.surviveOnBrokenCluster }}"
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          readinessProbe:
            httpGet:
              path: /ready
              port: 9000
            failureThreshold: 1
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /live
              port: 9000
            failureThreshold: 3
            initialDelaySeconds: 10
            # Allow sufficient amount of time (90 seconds = periodSeconds * failureThreshold)
            # for the registered shutdown handlers to run to completion.
            periodSeconds: 30
            successThreshold: 1
            # Setting a very low timeout value (e.g. 1 second) can cause false-positive
            # checks and service interruption.
            timeoutSeconds: 5

          # As per Kubernetes documentation (https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#when-should-you-use-a-startup-probe),
          # startup probe should point to the same endpoint as the liveness probe.
          #
          # Startup probe is only needed when container is taking longer to start than
          # `initialDelaySeconds + failureThreshold Ã— periodSeconds` of the liveness probe.
          startupProbe:
            httpGet:
              path: /live
              port: 9000
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
