// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`sample-1.prod 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: '1234'
    kubeworkflow/gitBranch: feature-branch-1
    kubeworkflow/mainNamespace: 'true'
    kapp.k14s.io/exists: ''
  labels:
    application: test-sample-1
  name: test-sample-1
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/disable-original: ''
spec:
  ingress:
    - from:
        - podSelector: {}
    - from:
        - namespaceSelector:
            matchLabels:
              network-policy/source: ingress-controller
    - from:
        - namespaceSelector:
            matchLabels:
              network-policy/source: monitoring
  podSelector: {}
  policyTypes:
    - Ingress
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/disable-original: ''
automountServiceAccountToken: false
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: app-configmap
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/disable-original: ''
data:
  NODE_ENV: production
  GRAPHQL_ENDPOINT: http://hasura/v1/graphql
  ACCOUNT_MAIL_SENDER: contact@fabrique.social.gouv.fr
  PRODUCTION: 'true'
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: app-2nd-instance
    application: test-sample-1
  name: app-2nd-instance
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/disable-default-ownership-label-rules: ''
    kapp.k14s.io/disable-default-label-scoping-rules: ''
    kapp.k14s.io/disable-original: ''
spec:
  ports:
    - name: http
      port: 80
      targetPort: 3000
  selector:
    component: app-2nd-instance
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: app
    application: test-sample-1
  name: app
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/disable-default-ownership-label-rules: ''
    kapp.k14s.io/disable-default-label-scoping-rules: ''
    kapp.k14s.io/disable-original: ''
spec:
  ports:
    - name: http
      port: 80
      targetPort: 3000
  selector:
    component: app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: hasura
    application: test-sample-1
  name: hasura
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/disable-default-ownership-label-rules: ''
    kapp.k14s.io/disable-default-label-scoping-rules: ''
    kapp.k14s.io/disable-original: ''
spec:
  ports:
    - name: http
      port: 80
      targetPort: 8080
  selector:
    component: hasura
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: pgweb
    application: test-sample-1
  name: pgweb
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/disable-default-ownership-label-rules: ''
    kapp.k14s.io/disable-default-label-scoping-rules: ''
    kapp.k14s.io/disable-original: ''
spec:
  ports:
    - name: http
      port: 8081
      targetPort: 8081
  selector:
    component: pgweb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: app-2nd-instance
    application: test-sample-1
  name: app-2nd-instance
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/change-group: kube-workflow/test-sample-1
    kapp.k14s.io/change-group.app-2nd-instance: kube-workflow/app-2nd-instance.test-sample-1
    kapp.k14s.io/disable-original: ''
    kapp.k14s.io/create-strategy: fallback-on-update
    kapp.k14s.io/update-strategy: fallback-on-replace
    kapp.k14s.io/nonce: ''
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app-2nd-instance
  template:
    metadata:
      labels:
        component: app-2nd-instance
        application: test-sample-1
    spec:
      containers:
        - image: ghcr.io/socialgouv/test-sample-1/app:prod
          livenessProbe:
            failureThreshold: 15
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
          name: app
          ports:
            - containerPort: 3000
              name: http
          readinessProbe:
            failureThreshold: 15
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 5
          envFrom:
            - secretRef:
                name: pg-user
            - secretRef:
                name: app-sealed-secret
            - configMapRef:
                name: app-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: app
    application: test-sample-1
  name: app
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/change-group: kube-workflow/test-sample-1
    kapp.k14s.io/change-group.app: kube-workflow/app.test-sample-1
    kapp.k14s.io/disable-original: ''
    kapp.k14s.io/create-strategy: fallback-on-update
    kapp.k14s.io/update-strategy: fallback-on-replace
    kapp.k14s.io/nonce: ''
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app
  template:
    metadata:
      labels:
        component: app
        application: test-sample-1
    spec:
      containers:
        - image: ghcr.io/socialgouv/test-sample-1/app:prod
          livenessProbe:
            failureThreshold: 15
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
          name: app
          ports:
            - containerPort: 3000
              name: http
          readinessProbe:
            failureThreshold: 15
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 5
          envFrom:
            - secretRef:
                name: pg-user
            - secretRef:
                name: app-sealed-secret
            - configMapRef:
                name: app-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: hasura
    application: test-sample-1
  name: hasura
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/change-group: kube-workflow/test-sample-1
    kapp.k14s.io/change-group.hasura: kube-workflow/hasura.test-sample-1
    kapp.k14s.io/disable-original: ''
    kapp.k14s.io/create-strategy: fallback-on-update
    kapp.k14s.io/update-strategy: fallback-on-replace
    kapp.k14s.io/nonce: ''
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hasura
  template:
    metadata:
      labels:
        component: hasura
        application: test-sample-1
    spec:
      containers:
        - image: ghcr.io/socialgouv/test-sample-1/hasura:prod
          livenessProbe:
            failureThreshold: 15
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
          name: hasura
          ports:
            - containerPort: 8080
              name: http
          readinessProbe:
            failureThreshold: 15
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 1280Mi
            requests:
              cpu: 50m
              memory: 128Mi
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 5
          env: []
          envFrom:
            - secretRef:
                name: pg-user
            - secretRef:
                name: hasura-sealed-secret
            - configMapRef:
                name: hasura-configmap
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: pgweb
    application: test-sample-1
  name: pgweb
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/change-group: kube-workflow/test-sample-1
    kapp.k14s.io/change-group.pgweb: kube-workflow/pgweb.test-sample-1
    kapp.k14s.io/disable-original: ''
    kapp.k14s.io/create-strategy: fallback-on-update
    kapp.k14s.io/update-strategy: fallback-on-replace
    kapp.k14s.io/nonce: ''
spec:
  replicas: 1
  selector:
    matchLabels:
      component: pgweb
  template:
    metadata:
      labels:
        component: pgweb
        application: test-sample-1
    spec:
      envFrom:
        - secretRef:
            name: pg-user
      initContainers:
        - name: wait-for-postgres
          image: ghcr.io/socialgouv/docker/wait-for-postgres:6.56.1
          imagePullPolicy: Always
          env:
            - name: WAIT_FOR_RETRIES
              value: '24'
          envFrom:
            - secretRef:
                name: pg-user
          resources:
            limits:
              cpu: 20m
              memory: 32Mi
            requests:
              cpu: 5m
              memory: 16Mi
      containers:
        - image: sosedoff/pgweb:0.11.8
          name: pgweb
          ports:
            - containerPort: 8081
              name: http
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 15
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: /
              port: http
            periodSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/configuration-snippet: >
      more_set_headers \\"Content-Security-Policy: default-src 'none'; connect-src
      'self' https://*.gouv.fr; font-src 'self'; img-src 'self'; prefetch-src
      'self' https://*.gouv.fr; script-src 'self' https://*.gouv.fr; frame-src
      'self' https://*.gouv.fr; style-src 'self' 'unsafe-inline'\\";

      more_set_headers \\"X-Frame-Options: deny\\";

      more_set_headers \\"X-XSS-Protection: 1; mode=block\\";

      more_set_headers \\"X-Content-Type-Options: nosniff\\";
    cert-manager.io: cluster-issuer
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: 'true'
    kapp.k14s.io/disable-original: ''
  labels:
    component: app-2nd-instance
    application: test-sample-1
  name: app-2nd-instance
  namespace: test-sample-1
spec:
  rules:
    - host: app-2nd-instance-test-sample-1.fabrique.social.gouv.fr
      http:
        paths:
          - backend:
              service:
                name: app-2nd-instance
                port:
                  name: http
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - app-2nd-instance-test-sample-1.fabrique.social.gouv.fr
      secretName: app-2nd-instance-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/configuration-snippet: >
      more_set_headers \\"Content-Security-Policy: default-src 'none'; connect-src
      'self' https://*.gouv.fr; font-src 'self'; img-src 'self'; prefetch-src
      'self' https://*.gouv.fr; script-src 'self' https://*.gouv.fr; frame-src
      'self' https://*.gouv.fr; style-src 'self' 'unsafe-inline'\\";

      more_set_headers \\"X-Frame-Options: deny\\";

      more_set_headers \\"X-XSS-Protection: 1; mode=block\\";

      more_set_headers \\"X-Content-Type-Options: nosniff\\";
    cert-manager.io: cluster-issuer
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: 'true'
    kapp.k14s.io/disable-original: ''
  labels:
    component: app
    application: test-sample-1
  name: app
  namespace: test-sample-1
spec:
  rules:
    - host: test-sample-1.fabrique.social.gouv.fr
      http:
        paths:
          - backend:
              service:
                name: app
                port:
                  name: http
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - test-sample-1.fabrique.social.gouv.fr
      secretName: app-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io: cluster-issuer
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: 'true'
    kapp.k14s.io/disable-original: ''
  labels:
    component: hasura
    application: test-sample-1
  name: hasura
  namespace: test-sample-1
spec:
  rules:
    - host: hasura-test-sample-1.fabrique.social.gouv.fr
      http:
        paths:
          - backend:
              service:
                name: hasura
                port:
                  name: http
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - hasura-test-sample-1.fabrique.social.gouv.fr
      secretName: hasura-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io: cluster-issuer
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/tls-acme: 'true'
    kapp.k14s.io/disable-original: ''
  labels:
    component: pgweb
    application: test-sample-1
  name: pgweb
  namespace: test-sample-1
spec:
  rules:
    - host: pgweb-test-sample-1.fabrique.social.gouv.fr
      http:
        paths:
          - backend:
              service:
                name: pgweb
                port:
                  name: http
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - pgweb-test-sample-1.fabrique.social.gouv.fr
      secretName: pgweb-crt
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: hasura-sealed-secret
  namespace: test-sample-1
  annotations:
    kapp.k14s.io/disable-original: ''
spec:
  encryptedData:
    ACCOUNT_EMAIL_SECRET: >-
      AgBc+UqJhU2ZBfuplyiI3pPekRjm36i62WYR1lVpM9PIwK636R78mpfckIeGU09qKAxWGYBqtYtvNP3lTG8OwEUqKLnUxZPZKbtwc78GwzEzaPpnWmM+j78uBDxqHDiW+jKwnD/6XiWxsfyd1ZU/qS0LDEJBnVRoDyUI0NxzFWLxG8ylr6oK3q+oD3338D588TimklZGOvRm/hI95d5uwKsYPz0zYOj28pgHzNMVycreOXi9l562agyg2hdb8AkFD41utLEURxJOomJUl2xZIjv6FX++R9OJQzRsX6WsCAkLZPO7VEi1cvG6QzPf/uchwystfQfW5c+5ofVJer5mLJJjFcO8OfNbsg/JYlndv4F90cjH2dojSHv/qH/ddpObPgkDpVzCljdTvrir5bl3z3KeqLb20ja1hLJlwOue4zHDCQ6Fwza8VN6BjbHZLYhOO5qlYfWezjwt+B6RdFVzD8wu2JbuWsJo5w2HhMl2Nckar1B8CPxzgRXnFwc/QsFTDXOXX+rtxnC4FJfffZ/2frV745c642AhOArDxk8OGDFkrexr5OMv0iJcY15cl6K9dfZWOKfFd5mxfWFhDWUSAoUZJsz4uVxpTCCoSJBe8Nf1aKk7PkZ+bXtV5bpuktySoPh0hG1M1dUg0WsSC2i6zp75AUxVW6c4GG7d9FMsTHIwyD7fEbV3TMRanSRFYNPOmft/oI7Q3oNGOGg26KCtX414FG02EnpmrttHQguY7cnHGG7i7s8mnyGv
    HASURA_GRAPHQL_ADMIN_SECRET: >-
      AgAQ9npiVSZcI8IA6kHHQ9tMaKYahCPmiYh9PoEmKIvisGCM4hQ2Q+UUoUvA2N3Id/GCxNZh3hqmTjLp+mHPy0e8rr9+/WVB5jrrqWO/oX2R1kXq0dbITF27UOjmTaUkZefPf7diHKpCXKGamkP6YbVuZa+1BBmBBfkIDJsraKO1CS/EO0QZAb0fHJiOkNy30j4pTTlg16JdugEj3kXdXXXZD/F8OyvlLBY1jivC/uFMGppNh1eRivgi4Y+krCDCuLphAa5YVslLMf7bboDD5Tk1b2HOCNYxQ96dxvkqCVtNd2rxXfDsYy9vMbQfYnsBjsIT7VZhk3GaMpVmPTRjp89XQDvj86+PrPtuFlgmfLrNvbvcqJ30y5lkD46c4Bd9zgwN4FeeVuY/oCKgfrN1qdCOT+ZYchkVQuCbKT+qK0gfOkYRt+B5feL5MtaEXX2MyhPS8wCvNLyAEth6NbmYxdXOPBXQrfGNcZYg/qjeB/muAzkd4wEPsR9ExoY5envlJ8Mx8LUQ/7A2tRp1jd+uy8s1hdb94BgOhcCqgzdqRkIVp40GiVHzVkFWQEkMEoX1Mw4iifs0QtAZu8qPyFWYORf9fty8zG/WX0RStdYbTuahCLb+Vqs2A5UEbg8nRdfl16aZJ3RY2fIoF1kYNG7XiZmp+bltOOqvYcOBnAr3Dy/y1PV1NrBMCULxibM57+nRyXrJe6TYLrJWPnp7meLLKppKPN3tgvx21s1/8bpbxC0xgshPZFgXQXgB
    HASURA_GRAPHQL_JWT_SECRET: >-
      AgAyuiPLqj0UMvhEkyEGF04LOp8al2O59/YGOei4hfkqcEw83rmJnb/o3nz96oLYG4gX/JlMT8grhUmR8wPG+Ah5UDuGK9POP75YYyNDQ05FrMDPCjQtEXNslqNp+oVS91ONUwJ7ARUr47vfQdxRoK03cFCboY0wEF8HMZzRjn5fXccttyT21kJV75Y0MtCif5jNCj+gtX2DIP9dNfvAJKCvOCzNJDALLmhv4tY71ZquGAiXf/+mJVP5ugRjFL0wYoKThAr3vph5cOPUo44swVilESu54gAoRlPNxFgOBXHS5Uu0VWryzTJyQGOElkYCxyBC45YzFZGMB3RWxaZtuForw76bD0RYWTVNsI+N/KmZdbYZO5Cs6HdqE2nptb3QAgpH0JOeWnzZGxTmkSOpEwCUGCJG+7ApPB5obIaVMZG39lWvZc/VTBZkTr7ufvOyIvwtYc9eh+AiNSy02gUXMzIkxK/eyWmKXowJcqXYK8K9iIgkLfMclUdWFQtHCN0h4OEyenRreP9qX8E34eeZ1ZwiDgJGOki8Ys4bphaFjSXZd82KRwuHDTIamAEGCUm7rLW9yOGE77AJpBTdqt2Qz9SUCXWbJewukbvtZwVtAEpEI/O+/KKNinObH0Lmhj8bRLn01rLgt9WsB972vEjboyzkT2gC7/G2Nx8O3IFiiJ9Ki5/hko5A4oorXdkCfuP7UfiKFR/pkXKqCOMrqi7uD7N0/qNtZ2j3satfeInOEldn1M6h7mz2IiRdszxq/RTsdFEO6h3X3lZLELXcDjgkZqCMXaPToAPRS2EKi6Ihs151VepGAerGOeq+DL+NU1aOwenivXe91vqDm9O0Cc3K756VBkUZA7ufFp3RKujk5fWygk0N8w0Zd9qU/tL7NqE/5n8xIdknzBI+qoHCrrOTnyMUpUEPuYbxY2lYkhb/4Afzte2nyM0K50I/4imEYWVsC+vNQ59OeYCoYcJBe19D+dm2rfxvYgy/H7scFjsl9rwCe23aPWQOJBJvcEnmgKOMRkG0cw6gvhBPVZ2w8gvIAfffLsj+zsag1izfgzcaajrfRr/kkxYk6R6Gz5tdjYSUz6P1Xk8LyCyB6st9IE433qlel4bwxjwh1CYz3pGUvAwj+TKsAF4xeiFd/LN3nitE74yGAOerbB/MrQqCcGbD6Anz2DWaFkhRxYKlJQsyy1rsxPzfo2wr8W/zpX7Jf17fHXJ96OG/WV2uZvudw7EjVdvxLhauabodjh3eC1/Kn9yvxJ5GTQLjJ04C/o7QgiIz+vNyxSqfvWf6zAsPJrAoHZXXoPbOaZVG2Sx1eWrhEIi8eV2z1x54SKLM0yy8lRTc2170AhLxqf4PaDTMR4ZTkhaIwPONeAIdHGnk3DVgYa/97WNO3j48ZnXwjKvp8mcKoe2Q9Y3WYuu4XafZg9UdDLbtePJiBlSF42uUbZsS4/oEU8ErRyodcOQPUYEM5SGuxceTvyxi6v7zhgYv3TiwWGgkoxznvFZ9H8m3SN0hCY4TINo9bnBAm2XRzZrhmGRpoKTOvQbkIXKoOzKeoQRgopjUdWW5X4EcKOW76X7B20x+2sPVkqwN/u5KFX3+HY3z1ui1+nIIKlbjUCY17QwxuVDP7yMU6xeBhtwUz0FkFGyHuSbrk+NhpA==
  template:
    metadata:
      name: hasura-sealed-secret
    type: Opaque
"
`;
