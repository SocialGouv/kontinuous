# see https://github.com/moby/buildkit/blob/master/examples/kubernetes/job.rootless.yaml
runs:
  - name: buildkit
    checkout: true
    action: false
    # image: moby/buildkit:v0.8.1-rootless
    # image: moby/buildkit:master-rootless
    image: moby/buildkit:v0.10.5-rootless
    # serviceAccountName: buildkit
    cpuLimit: "2"
    cpuRequest: 500m
    memoryLimit: 4Gi
    memoryRequest: 1Gi
    entrypoint: ["/bin/sh","-c"]
    user: 1000
    group: 1000
    annotations:
      container.apparmor.security.beta.kubernetes.io/job: unconfined
    seccompProfile:
      type: Unconfined
    envFrom:
      - secretRef:
          name: "{{ or $.with.registrySecretRefName $.Values.global.registrySecretRefName }}"
    env:
      - name: BUILDKITD_FLAGS
        value: --oci-worker-no-process-sandbox
    secrets: "{{ $.with.secrets | toJson }}"
    volumes:
      - name: buildkitd
        emptyDir: {}
    volumeMounts:
      - mountPath: /home/user/.local/share/buildkit
        name: buildkitd
    run: |
      if [ "{{ $.with.registry }}" != "" ]; then
        export CI_REGISTRY="{{ $.with.registry }}"
      fi
      mkdir -p /home/user/.docker
      echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /home/user/.docker/config.json
      export IMAGE_PATH=$CI_REGISTRY{{ if (or $.with.imageProject $.Values.global.imageProject) }}{{ (print "/" (or $.with.imageProject $.Values.global.imageProject)) }}{{ end }}/{{ or $.with.imageRepository $.Values.global.imageRepository }}{{ if $.with.imagePackage }}{{ (print "/" $.with.imagePackage) }}{{ end }}{{ if $.with.target }}{{ (print "-" $.with.target) }}{{ end }}
      export LATEST_TAG=""
      if [ "{{ $.Values.global.isProd }}" = "true" ]; then
        export LATEST_TAG=",$IMAGE_PATH:latest"
      fi
      buildctl-daemonless.sh \
        build \
        --frontend dockerfile.v0 \
        --local context=/workspace/{{ if $.with.context }}/{{ $.with.context }}{{ end }} \
        --local dockerfile=/workspace{{ if $.with.context }}/{{ $.with.context }}{{ end }} \
        --opt filename=./{{ or $.with.dockerfile "Dockerfile" }} \
        --output type=image,\"name=$IMAGE_PATH:{{ or $.with.imageTag $.Values.global.imageTag }},$IMAGE_PATH:{{ $.Values.global.branchSlug32 }}$LATEST_TAG\",push=true \
        --export-cache type=inline \
        --import-cache type=registry,ref=$IMAGE_PATH:{{ $.Values.global.branchSlug32 }} \
        {{ if $.with.buildArgs -}}
        {{- range $key, $val := $.with.buildArgs -}}
        --opt build-arg:"{{ tpl $key $ }}={{ tpl (print $val) $ }}" \
        {{ end -}}
        {{ end -}}
        {{ if $.with.secrets -}}
        {{- range $id, $val := $.with.secrets -}}
        --secret id={{ or $val.id $id }},env=SECRET_{{ $id | upper }} \
        {{ end -}}
        {{ end -}}
        {{ if $.with.target -}}
        --target="{{ $.with.target }}" \
        {{ end -}}
      
      echo "$IMAGE_PATH:{{ or $.with.imageTag $.Values.global.imageTag }}" >$KONTINUOUS_OUTPUT/IMAGE