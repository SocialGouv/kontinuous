apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: {{ (or .Values.component .Chart.Name) | lower }}
    application: {{ .Values.global.repositoryName }}
  name: {{ (or .Values.component .Chart.Name) | lower }}
  namespace: {{ or .Values.namespace .Values.global.namespace }}
  annotations: {}
spec:
  replicas: {{ or .Values.replicas .Values.global.replicas 1 }}
  selector:
    matchLabels:
      component: {{ (or .Values.component .Chart.Name) | lower }}
  template:
    metadata:
      labels:
        component: {{ (or .Values.component .Chart.Name) | lower }}
        application: {{ .Values.global.repositoryName }}
    spec:
      initContainers:
      {{- if .Values.waitForPostgres }}
        {{- include "contrib-helpers.init-containers.wait-for-postgres" . | nindent 8 }}
      {{- end }}
      containers:
        - image: "{{ or .Values.registry .Values.global.registry }}{{ if (or .Values.imageProject .Values.global.imageProject) }}{{ (print "/" (or .Values.imageProject .Values.global.imageProject)) }}{{ end }}/{{ or .Values.imageRepository .Values.global.imageRepository }}{{ if .Values.imagePackage }}{{ (print "/" .Values.imagePackage) }}{{ end }}:{{ or .Values.imageTag .Values.global.imageTag }}"
          name: hasura
          ports:
            - containerPort: {{ .Values.containerPort }}
              name: http
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probesPath }}
              port: http
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probesPath }}
              port: http
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          startupProbe:
            httpGet:
              path: {{ .Values.probesPath }}
              port: http
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
          env:
            {{- if gt (len .Values.env) 0 }}
            {{- tpl (.Values.env | toYaml) . | nindent 12 }}
            {{- end }}
            {{- range $name, $value := .Values.vars }}
            - name: "{{ $name }}"
              value: "{{ tpl $value $ }}"
            {{- end }}
          envFrom: {{ tpl (.Values.envFrom | toJson) . }}
