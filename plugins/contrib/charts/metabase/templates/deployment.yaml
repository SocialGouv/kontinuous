apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: {{ (or .Values.component .Chart.Name) | lower }}
    application: {{ .Values.global.repositoryName }}
  name: {{ (or .Values.component .Chart.Name) | lower }}
  namespace: {{ or .Values.namespace .Values.global.namespace }}
  annotations: {}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: {{ (or .Values.component .Chart.Name) | lower }}
  template:
    metadata:
      labels:
        component: {{ (or .Values.component .Chart.Name) | lower }}
    spec:
      containers:
        - image: metabase/metabase:v0.44.0
          name: metabase
          env:
            {{- if gt (len .Values.env) 0 }}
            {{- tpl (.Values.env | toYaml) . | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ (or .Values.component .Chart.Name) | lower }}
            {{- if gt (len .Values.envFrom) 0 }}
            {{- tpl (.Values.envFrom | toYaml) . | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: 3000
              name: http
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /api/health
              port: http
            periodSeconds: 10
            initialDelaySeconds: 60
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 15
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 1
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 2048Mi
            requests:
              cpu: 500m
              memory: 512Mi
