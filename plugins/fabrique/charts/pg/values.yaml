backup:
  enabled: false
  # to override the backup destination path (in case we need a new destination for a new cluster)
  name: ""

cnpg-cluster:
  enabled: true
  fullnameOverride: test-cluster
  ~tpl~fullnameOverride: "{{ index .Values.kontinuous.chartContext 2 }}"
  ~tpl~nameOverride: "{{ index .Values.kontinuous.chartContext 2 }}"
  ~tpl~dbSecretName: "{{ index .Values.kontinuous.chartContext 2 }}-db"
  ~tpl~~needs: |
    - {{ .Values.kontinuous.parentChart }}.jobs-pg
  ~tpl~dbOwner: "{{ .Values.global.pgUser }}"
  ~tpl~dbName: "{{ .Values.global.pgDatabase }}"
  ~tpl~instances: "{{ or (and .Values.Parent._ProjectValues (index .Values.Parent._ProjectValues `cnpg-cluster`).instances) ((or .Values.global.isProd .Values.global.isPreProd) | ternary `3` `1`) }}"
  postgresqlParameters:
    TimeZone: "Europe/Paris"
  extensions:
    - postgis
    - postgis_topology
    - fuzzystrmatch
    - postgis_tiger_geocoder
    - uuid-ossp
    - citext
    - pgcrypto
    - hstore
  monitoring:
    ~tpl~enablePodMonitor: "{{ (or .Values.global.isProd .Values.global.isPreProd) | ternary `true` `false` }}"
  persistence:
    size: 8Gi
    # pvcTemplate:
  image:
    repository: "ghcr.io/cloudnative-pg/postgis"
    tag: "14"
  poolers:
    rw:
      ~tpl~instances: "{{ or (and .Values.Parent._ProjectValues (index .Values.Parent._ProjectValues `cnpg-cluster`).instances) ((or .Values.global.isProd .Values.global.isPreProd) | ternary `3` `1`) }}"
      type: rw
      pgbouncer:
        poolMode: session
        parameters:
          max_client_conn: "1000"
          # default_pool_size: "10"
  backup:
    ~tpl~enabled: "{{ (or .Values.Parent.backup.enabled .Values.global.isProd .Values.global.isPreProd) | ternary `true` `false` }}"
    schedule: "0 0 0 * * *" # daily
    retentionPolicy: 60d
    barmanObjectStore:
      ~tpl~destinationPath: "s3://{{ .Values.global.projectName }}-{{ .Values.global.isProd | ternary `prod` `dev` }}-backups/{{ .Values.global.namespace }}{{ (ne .Values.Parent.backup.name ``) | ternary (print `-` .Values.Parent.backup.name) `` }}"
      ~tpl~endpointURL: "{{ .Values.global.pgBackupEndpointURL }}"
      wal:
        compression: gzip
      s3Credentials:
        accessKeyId:
          ~tpl~name: "{{ .Values.global.projectName }}-{{ .Values.global.isProd | ternary `prod` `dev` }}-backups-access-key"
          key: bucket_access_key
        secretAccessKey:
          ~tpl~name: "{{ .Values.global.projectName }}-{{ .Values.global.isProd | ternary `prod` `dev` }}-backups-access-key"
          key: bucket_secret_key
        region:
          ~tpl~name: "{{ .Values.global.projectName }}-{{ .Values.global.isProd | ternary `prod` `dev` }}-backups-access-key"
          key: bucket_region

jobs-pg:
  enabled: true
  runs:
    create-secrets:
      use: cnpg-create-secrets
      with:
        ~tpl~pgSecretName: "{{ index .Values.kontinuous.chartContext 2 }}-app"
        ~tpl~cnpgDbSecretName: "{{ index .Values.kontinuous.chartContext 2 }}-db"
        ~tpl~pgHost: "{{ index .Values.kontinuous.chartContext 2 }}-rw"
