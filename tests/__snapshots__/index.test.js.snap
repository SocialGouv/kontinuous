// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`build manifests for test "metabase" with env "dev" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
    janitor/ttl: 7d
  labels:
    application: test-metabase
    cert: wildcard
  name: test-metabase-feature-branch-1
  namespace: test-metabase-feature-branch-1
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-metabase-feature-branch-1
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "metabase" with env "preprod" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
  labels:
    application: test-metabase
    cert: wildcard
  name: test-metabase-preprod
  namespace: test-metabase-preprod
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-metabase-preprod
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "metabase" with env "prod" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
  labels:
    application: test-metabase
  name: test-metabase
  namespace: test-metabase
---
apiVersion: v1
data:
  MB_ADMIN_EMAIL: admin@fabrique.social.gouv.fr
  MB_ANON_TRACKING_ENABLED: \\"false\\"
  MB_APPLICATION_LOGO_URL: https://socialgouv.github.io/support/_media/marianne.jpeg
  MB_APPLICATION_NAME: metabase-app1
  MB_DB_TYPE: postgres
  MB_EMAIL_FROM_ADDRESS: contact@fabrique.social.gouv.fr
  MB_ENABLE_EMBEDDING: \\"true\\"
  MB_ENABLE_PUBLIC_SHARING: \\"true\\"
  MB_SITE_LOCALE: fr
  MB_SITE_NAME: Fabrique des ministères sociaux
kind: ConfigMap
metadata:
  labels:
    application: test-metabase
    component: metabase-app1
  name: metabase-app1
  namespace: test-metabase
---
apiVersion: v1
data:
  MB_ADMIN_EMAIL: admin@fabrique.social.gouv.fr
  MB_ANON_TRACKING_ENABLED: \\"false\\"
  MB_APPLICATION_LOGO_URL: https://socialgouv.github.io/support/_media/marianne.jpeg
  MB_APPLICATION_NAME: metabase-app2
  MB_DB_TYPE: postgres
  MB_EMAIL_FROM_ADDRESS: contact@fabrique.social.gouv.fr
  MB_ENABLE_EMBEDDING: \\"true\\"
  MB_ENABLE_PUBLIC_SHARING: \\"true\\"
  MB_SITE_LOCALE: fr
  MB_SITE_NAME: Fabrique des ministères sociaux
kind: ConfigMap
metadata:
  labels:
    application: test-metabase
    component: metabase-app2
  name: metabase-app2
  namespace: test-metabase
---
apiVersion: v1
data:
  METABASE_ENV: production
kind: ConfigMap
metadata:
  name: metabase1-configmap
  namespace: test-metabase
---
apiVersion: v1
data:
  METABASE_ENV: production
kind: ConfigMap
metadata:
  name: metabase2-configmap
  namespace: test-metabase
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-metabase
    component: metabase-app1
  name: metabase-app1
  namespace: test-metabase
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: metabase-app1
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-metabase
    component: metabase-app2
  name: metabase-app2
  namespace: test-metabase
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: metabase-app2
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-metabase
    component: metabase-app1
  name: metabase-app1
  namespace: test-metabase
spec:
  replicas: 1
  selector:
    matchLabels:
      component: metabase-app1
  template:
    metadata:
      labels:
        application: null
        component: metabase-app1
    spec:
      containers:
      - env: null
        envFrom:
        - configMapRef:
            name: metabase-app1
        - secretRef:
            name: metabase1-sealed-secret
        - configMapRef:
            name: metabase1-configmap
        image: metabase/metabase:v0.41.6
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: metabase
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 1000m
            memory: 2048Mi
          requests:
            cpu: 500m
            memory: 512Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 240
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-metabase
    component: metabase-app2
  name: metabase-app2
  namespace: test-metabase
spec:
  replicas: 1
  selector:
    matchLabels:
      component: metabase-app2
  template:
    metadata:
      labels:
        application: null
        component: metabase-app2
    spec:
      containers:
      - env: null
        envFrom:
        - configMapRef:
            name: metabase-app2
        - secretRef:
            name: metabase2-sealed-secret
        - configMapRef:
            name: metabase2-configmap
        image: metabase/metabase:v0.41.6
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: metabase
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 1000m
            memory: 2048Mi
          requests:
            cpu: 500m
            memory: 512Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 240
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: metabase1-sealed-secret
  namespace: test-metabase
spec:
  encryptedData:
    METABASE_SECRET: AgBc+UqJhU2ZBfuplyiI3pPekRjm36i62WYR1lVpM9PIwK636R78mpfckIeGU09qKAxWGYBqtYtvNP3lTG8OwEUqKLnUxZPZKbtwc78GwzEzaPpnWmM+j78uBDxqHDiW+jKwnD/6XiWxsfyd1ZU/qS0LDEJBnVRoDyUI0NxzFWLxG8ylr6oK3q+oD3338D588TimklZGOvRm/hI95d5uwKsYPz0zYOj28pgHzNMVycreOXi9l562agyg2hdb8AkFD41utLEURxJOomJUl2xZIjv6FX++R9OJQzRsX6WsCAkLZPO7VEi1cvG6QzPf/uchwystfQfW5c+5ofVJer5mLJJjFcO8OfNbsg/JYlndv4F90cjH2dojSHv/qH/ddpObPgkDpVzCljdTvrir5bl3z3KeqLb20ja1hLJlwOue4zHDCQ6Fwza8VN6BjbHZLYhOO5qlYfWezjwt+B6RdFVzD8wu2JbuWsJo5w2HhMl2Nckar1B8CPxzgRXnFwc/QsFTDXOXX+rtxnC4FJfffZ/2frV745c642AhOArDxk8OGDFkrexr5OMv0iJcY15cl6K9dfZWOKfFd5mxfWFhDWUSAoUZJsz4uVxpTCCoSJBe8Nf1aKk7PkZ+bXtV5bpuktySoPh0hG1M1dUg0WsSC2i6zp75AUxVW6c4GG7d9FMsTHIwyD7fEbV3TMRanSRFYNPOmft/oI7Q3oNGOGg26KCtX414FG02EnpmrttHQguY7cnHGG7i7s8mnyGv
  template:
    metadata:
      creationTimestamp: null
      name: metabase1-sealed-secret
    type: Opaque
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: metabase2-sealed-secret
  namespace: test-metabase
spec:
  encryptedData:
    METABASE_SECRET: AgBc+UqJhU2ZBfuplyiI3pPekRjm36i62WYR1lVpM9PIwK636R78mpfckIeGU09qKAxWGYBqtYtvNP3lTG8OwEUqKLnUxZPZKbtwc78GwzEzaPpnWmM+j78uBDxqHDiW+jKwnD/6XiWxsfyd1ZU/qS0LDEJBnVRoDyUI0NxzFWLxG8ylr6oK3q+oD3338D588TimklZGOvRm/hI95d5uwKsYPz0zYOj28pgHzNMVycreOXi9l562agyg2hdb8AkFD41utLEURxJOomJUl2xZIjv6FX++R9OJQzRsX6WsCAkLZPO7VEi1cvG6QzPf/uchwystfQfW5c+5ofVJer5mLJJjFcO8OfNbsg/JYlndv4F90cjH2dojSHv/qH/ddpObPgkDpVzCljdTvrir5bl3z3KeqLb20ja1hLJlwOue4zHDCQ6Fwza8VN6BjbHZLYhOO5qlYfWezjwt+B6RdFVzD8wu2JbuWsJo5w2HhMl2Nckar1B8CPxzgRXnFwc/QsFTDXOXX+rtxnC4FJfffZ/2frV745c642AhOArDxk8OGDFkrexr5OMv0iJcY15cl6K9dfZWOKfFd5mxfWFhDWUSAoUZJsz4uVxpTCCoSJBe8Nf1aKk7PkZ+bXtV5bpuktySoPh0hG1M1dUg0WsSC2i6zp75AUxVW6c4GG7d9FMsTHIwyD7fEbV3TMRanSRFYNPOmft/oI7Q3oNGOGg26KCtX414FG02EnpmrttHQguY7cnHGG7i7s8mnyGv
  template:
    metadata:
      creationTimestamp: null
      name: metabase2-sealed-secret
    type: Opaque
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: \\"true\\"
  labels:
    application: test-metabase
    component: metabase-app1
  name: metabase-app1
  namespace: test-metabase
spec:
  rules:
  - host: metabase-app1-test-metabase.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: metabase-app1
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - metabase-app1-test-metabase.fabrique.social.gouv.fr
    secretName: test-metabase-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: \\"true\\"
  labels:
    application: test-metabase
    component: metabase-app2
  name: metabase-app2
  namespace: test-metabase
spec:
  rules:
  - host: metabase-app2-test-metabase.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: metabase-app2
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - metabase-app2-test-metabase.fabrique.social.gouv.fr
    secretName: test-metabase-crt
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-metabase
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "redirect" with env "dev" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
    janitor/ttl: 7d
  labels:
    application: test-redirect
    cert: wildcard
  name: test-redirect-feature-branch-1
  namespace: test-redirect-feature-branch-1
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-redirect-feature-branch-1
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "redirect" with env "preprod" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
  labels:
    application: test-redirect
    cert: wildcard
  name: test-redirect-preprod
  namespace: test-redirect-preprod
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-redirect-preprod
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "redirect" with env "prod" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
  labels:
    application: test-redirect
  name: test-redirect
  namespace: test-redirect
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-redirect
    component: app
  name: app
  namespace: test-redirect
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: app
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-redirect
    component: app
  name: app
  namespace: test-redirect
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app
  template:
    metadata:
      labels:
        application: test-redirect
        component: app
    spec:
      containers:
      - env: null
        envFrom: null
        image: ghcr.io/socialgouv/test-redirect/app:sha-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /index.html
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: app
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /index.html
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /index.html
            port: http
          periodSeconds: 5
        volumeMounts: null
      initContainers: null
      volumes: null
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: \\"true\\"
  labels:
    application: test-redirect
    component: app
  name: app
  namespace: test-redirect
spec:
  rules:
  - host: transco.travail-emploi.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: app
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - transco.travail-emploi.gouv.fr
    secretName: test-redirect-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: \\"true\\"
    nginx.ingress.kubernetes.io/permanent-redirect: https://transco.travail-emploi.gouv.fr$request_uri
  name: app-redirect
  namespace: test-redirect
spec:
  rules:
  - host: test-redirect.fabrique.social.gouv.fr
  tls:
  - hosts:
    - test-redirect.fabrique.social.gouv.fr
    secretName: app-redirect
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-redirect
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "sample-1" with env "dev" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
    janitor/ttl: 7d
  labels:
    application: test-sample-1
    cert: wildcard
  name: test-sample-1-feature-branch-1
  namespace: test-sample-1-feature-branch-1
---
apiVersion: v1
data:
  ACCOUNT_MAIL_SENDER: contact@fabrique.social.gouv.fr
  GRAPHQL_ENDPOINT: http://hasura/v1/graphql
  NODE_ENV: production
  PRODUCTION: \\"false\\"
kind: ConfigMap
metadata:
  name: app-configmap
  namespace: test-sample-1-feature-branch-1
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1-feature-branch-1
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1-feature-branch-1
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: app-2nd-instance
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1-feature-branch-1
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    component: hasura
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1-feature-branch-1
spec:
  ports:
  - name: http
    port: 8081
    targetPort: 8081
  selector:
    component: pgweb
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels: {}
  name: jobs-shared-storage
  namespace: awesome-ci
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
  storageClassName: azurefile
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1-feature-branch-1
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app
  template:
    metadata:
      labels:
        application: test-sample-1
        component: app
    spec:
      containers:
      - env: null
        envFrom:
        - secretRef:
            name: pg-user-feature-branch-1
        - secretRef:
            name: app-sealed-secret
        - configMapRef:
            name: app-configmap
        image: ghcr.io/socialgouv/test-sample-1/app:sha-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: app
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
        volumeMounts:
        - mountPath: /mnt/upload
          name: upload
        - mountPath: /mnt/docs
          name: docs
      initContainers: null
      volumes:
      - name: upload
        persistentVolumeClaim:
          claimName: upload
      - name: docs
        persistentVolumeClaim:
          claimName: docs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1-feature-branch-1
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app-2nd-instance
  template:
    metadata:
      labels:
        application: test-sample-1
        component: app-2nd-instance
    spec:
      containers:
      - env: null
        envFrom:
        - secretRef:
            name: pg-user-feature-branch-1
        - secretRef:
            name: app-sealed-secret
        - configMapRef:
            name: app-configmap
        image: ghcr.io/socialgouv/test-sample-1/app:sha-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: app
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
        volumeMounts: null
      initContainers: null
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1-feature-branch-1
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hasura
  template:
    metadata:
      labels:
        application: test-sample-1
        component: hasura
    spec:
      containers:
      - env: []
        envFrom:
        - secretRef:
            name: pg-user-feature-branch-1
        - secretRef:
            name: hasura-sealed-secret
        - configMapRef:
            name: hasura-configmap
        image: ghcr.io/socialgouv/test-sample-1/hasura:sha-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: hasura
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 1280Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 30
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
      initContainers: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1-feature-branch-1
spec:
  replicas: 1
  selector:
    matchLabels:
      component: pgweb
  template:
    metadata:
      labels:
        application: test-sample-1
        component: pgweb
    spec:
      containers:
      - image: sosedoff/pgweb:0.11.8
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: pgweb
        ports:
        - containerPort: 8081
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /
            port: http
          periodSeconds: 5
      envFrom:
      - secretRef:
          name: pg-user-feature-branch-1
      initContainers:
      - env:
        - name: WAIT_FOR_RETRIES
          value: \\"24\\"
        envFrom:
        - secretRef:
            name: pg-user-feature-branch-1
        image: ghcr.io/socialgouv/docker/wait-for-postgres:6.56.1
        imagePullPolicy: Always
        name: wait-for-postgres
        resources:
          limits:
            cpu: 20m
            memory: 32Mi
          requests:
            cpu: 5m
            memory: 16Mi
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: jobci-clean-workflow
  namespace: awesome-ci
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - command:
            - /bin/bash
            - -c
            - |
              echo \\"$KUBECONFIG\\" > ~/.kube/config
              export KUBECONFIG=~/.kube/config
              export JOB_NAMESPACE=\\"awesome-ci\\"
              ACTIVE_JOBS=$(kubectl get jobs -n $JOB_NAMESPACE -o json | jq \\".items | .[] | select(.status.active > 0).metadata.name\\")
              for subdir in /workflow/*; do

                [ -d \\"$subdir\\" ] || continue
                subdir_basename=\${subdir##*/}
                if ! echo $ACTIVE_JOBS | grep -e \\"job-\${subdir_basename}\\"; then
                  echo \\"Cleaning '$subdir'\\"
                  rm -rf $subdir
                fi
              done
            envFrom:
            - secretRef:
                name: kubeconfig
            image: bitnami/kubectl:latest
            imagePullPolicy: IfNotPresent
            name: job
            volumeMounts:
            - mountPath: /workflow
              name: workflow
          restartPolicy: Never
          volumes:
          - name: workflow
            persistentVolumeClaim:
              claimName: jobs-shared-storage
  schedule: 0 0 * * *
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    janitor/ttl: \\"1800\\"
    kapp.k14s.io/change-group: autodevops/test-sample-1-feature-branch-1
    kapp.k14s.io/change-group.db: autodevops/db.test-sample-1-feature-branch-1
    kapp.k14s.io/change-group.db..create-db: autodevops/db..create-db.test-sample-1-feature-branch-1
    kapp.k14s.io/change-group.db.create-db: autodevops/db.create-db.test-sample-1-feature-branch-1
    kapp.k14s.io/change-rule.db..create-secret: upsert after upserting autodevops/db..create-secret.test-sample-1-feature-branch-1
    kapp.k14s.io/nonce: \\"\\"
    kapp.k14s.io/update-strategy: fallback-on-replace
  name: job-feature-branch-1-db--create-db
  namespace: awesome-ci
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 3
  template:
    metadata:
      annotations: {}
      labels: {}
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          /action/ensure-db.sh
        env:
        - name: NEW_DB_NAME
          valueFrom:
            secretKeyRef:
              key: PGDATABASE
              name: pg-user-feature-branch-1
        - name: NEW_USER
          valueFrom:
            secretKeyRef:
              key: PGUSER
              name: pg-user-feature-branch-1
        - name: NEW_PASSWORD
          valueFrom:
            secretKeyRef:
              key: PGPASSWORD
              name: pg-user-feature-branch-1
        - name: PGHOST
          valueFrom:
            secretKeyRef:
              key: PGHOST
              name: pg-user-feature-branch-1
        - name: NEW_DB_EXTENSIONS
          value: hstore pgcrypto citext uuid-ossp postgis pg_trgm unaccent
        envFrom:
        - secretRef:
            name: pg-scaleway
        image: ghcr.io/socialgouv/docker/psql:6.70.0
        imagePullPolicy: IfNotPresent
        name: job
        volumeMounts:
        - mountPath: /workspace
          name: workspace
        - mountPath: /action
          name: action
        - mountPath: /workflow
          name: workflow
          subPath: feature-branch-1/ffac537e6cbbf934b08745a378932722df287a53
      initContainers:
      - command:
        - sh
        - -c
        - npx degit ./jobs/create-db /action
        image: node:17
        name: degit-action
        securityContext:
          runAsGroup: 1000
          runAsUser: 1000
        volumeMounts:
        - mountPath: /action
          name: action
      restartPolicy: Never
      volumes:
      - emptyDir: {}
        name: workspace
      - emptyDir: {}
        name: action
      - name: workflow
        persistentVolumeClaim:
          claimName: jobs-shared-storage
  ttlSecondsAfterFinished: 1800
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    janitor/ttl: \\"1800\\"
    kapp.k14s.io/change-group: autodevops/test-sample-1-feature-branch-1
    kapp.k14s.io/change-group.db: autodevops/db.test-sample-1-feature-branch-1
    kapp.k14s.io/change-group.db..create-secret: autodevops/db..create-secret.test-sample-1-feature-branch-1
    kapp.k14s.io/change-group.db.create-secret: autodevops/db.create-secret.test-sample-1-feature-branch-1
    kapp.k14s.io/nonce: \\"\\"
    kapp.k14s.io/update-strategy: fallback-on-replace
  name: job-feature-branch-1-db--create-secret
  namespace: awesome-ci
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 3
  template:
    metadata:
      annotations: {}
      labels: {}
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          /action/create-secret.sh
        env:
        - name: DB_SECRET_NAME
          value: pg-user-feature-branch-1
        - name: JOB_NAMESPACE
          value: awesome-ci
        - name: NAMESPACE
          value: test-sample-1-feature-branch-1
        - name: PGDATABASE
          value: autodevops_feature-branch-1
        - name: PGUSER
          value: user_feature-branch-1
        envFrom:
        - secretRef:
            name: pg-scaleway
        - secretRef:
            name: kubeconfig
        image: bitnami/kubectl:latest
        imagePullPolicy: IfNotPresent
        name: job
        volumeMounts:
        - mountPath: /workspace
          name: workspace
        - mountPath: /action
          name: action
        - mountPath: /workflow
          name: workflow
          subPath: feature-branch-1/ffac537e6cbbf934b08745a378932722df287a53
      initContainers:
      - command:
        - sh
        - -c
        - npx degit ./jobs/create-db /action
        image: node:17
        name: degit-action
        securityContext:
          runAsGroup: 1000
          runAsUser: 1000
        volumeMounts:
        - mountPath: /action
          name: action
      restartPolicy: Never
      volumes:
      - emptyDir: {}
        name: workspace
      - emptyDir: {}
        name: action
      - name: workflow
        persistentVolumeClaim:
          claimName: jobs-shared-storage
  ttlSecondsAfterFinished: 1800
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    kapp.k14s.io/change-group: autodevops/post-test-sample-1-feature-branch-1
    kapp.k14s.io/change-rule: upsert after upserting autodevops/test-sample-1-feature-branch-1
    kapp.k14s.io/nonce: \\"\\"
    kapp.k14s.io/update-strategy: fallback-on-replace
  name: jobci-post-operations
  namespace: awesome-ci
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 1
  template:
    metadata:
      annotations: {}
      labels: {}
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - rm -rf /workflow/*
        image: alpine:3
        imagePullPolicy: IfNotPresent
        name: job
        volumeMounts:
        - mountPath: /workflow
          name: workflow
          subPath: feature-branch-1/ffac537e6cbbf934b08745a378932722df287a53
      restartPolicy: Never
      volumes:
      - name: workflow
        persistentVolumeClaim:
          claimName: jobs-shared-storage
  ttlSecondsAfterFinished: 1800
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: \\"true\\"
  creationTimestamp: null
  name: hasura-sealed-secret
  namespace: test-sample-1-feature-branch-1
spec:
  encryptedData:
    ACCOUNT_EMAIL_SECRET: AgCYU5zQRAGub/7BY2VzhhQ/Y5EtYeWcgdBrHMfOdhK6DLDbkiYTVBvdIVbvUp/AtHP8V3UwT0zoQfKRiECwdH6oJ92GJ2DQ6svTNJH+x4EyQRJTeRMOrx6y+iVAcFx6I5RbT6SdKkpzGztpY4t4pGt3IOUoKNrJRqshj170LQqsw57NyxzSgZ0HONNsHE+HUK6AijgZXBthAfWqlFyrg6WIBY1f/jyuZ7jvzlotTI9JXXSBz8LryNYG7kth2weHcmlQKiqERPbWGFuGwM77hzgFwixjqnrGJEjWXDfsAmBLk+B9nVht2H54pPYCD+cyRea5NeisxnNCAOw10BJHEX1gxgNzSwQDVfOSINWT1a8R81tm7Dz7j3LyKKT+UH8BREHMlu4qv7+D6PjrRXJXtAMGN6Vsz0Hqvf6vlZou7O4ygcAtirRaSPvsuU1FOg2JvwfheUVZ7StBGhsTBWyQ0jw9UqAXcjtcbqfzeOc8sEEe/5xyRJctT+A4s4XNGxiF/Mnaa9XB5OHtz55FUDzy2o0S21JXFjnNs2kmDji3gjPwYJzg+qat7ZcGBNMR4KNvu2SiUoDdQMKzmh7mi4nwqlOv08eJVP8ZzXGS3F8QcsMFXPfrH/53hunKq6gQ61D3+CsCN6Hz89X7FgWnMroMv52gNwtUc0yeQ+klIB2RsY6+NefWx0p+ikxHY9MG64qMPtFNG+RW2TwRgcdbD6CC31GUVmGVLpEF95RF7v1i66H9EvNwiRZCagnZ4qYcrQ==
    HASURA_GRAPHQL_ADMIN_SECRET: AgDZX0nGJWSkGYaaTpArKf3L1jsBEzKzsE1qkDIziGJHgVuqdPUhvZwmd6/9yPtkw7ohLh4/yqpQFELURajvHPJy4ZBok5bRhX4eC2tbsEQ+20YmL86KGNUhGSdJ9Ua3m/jV5qEyFnLPBG4cPJL4OjEDNvm/WwJvQfTlXaV4YoZMzlZmPMLFKAQ/8jKoefaIjtTXPq3YSeULlEx94Pv08C5b6o0US4fQwhtBAUOlUmhPEDXo0u4r4yM5w7HGWSCD4Dsb+rHlcRi7ulCCafeaBLITq3BMhzS1eO5XNrLGzh4iDh4rTtv83Y8kFFvb/zXlq/uiPZMoTxaH5eTqYQkCRA3L/2T7hWWiINDB9kbNTIyIZ2uF0W1RLnwgq2VASruNEhxXHYKeQfnhxcqTxGAsTgJgAGhMm17vALEAHt+72L4O822WJw39TB9ozqbnZ0I++ZAmd+kIrZ3Uxp7WfzmM7bKzdqn8L2k0jxHCOKWxChXayONqTFUq9YfJdqSHtNnfi5Bt610SjmD62Vil1hmxIhQv6xmzRwo2pfbhrUj6gNsNdDTrV5fxfZzEOtvwl6C+bPuHmD+qbke78eiJp8A4WIgn1CayHsSoaokH36Q1IW+ETuyQHhz8RMd8ZmrGAeSWUm71SR0nKCWgCwtRX4NhBR5fGR8M7CLTJm3ofrv1fyZ8WKPC7OcnhHmKYBeaw6qku9K+0qRCuvIp/6/dd28SC1obdir77d924ZTkFxUVIAu9J0u0AOEu6UZS
    HASURA_GRAPHQL_JWT_SECRET: AgB0yHuBM57mDtyon+1dEC9PTgejHVGA5uOHbdu5P4tH6CuOgpH2cnbXnBaeD+7d52aCNto7a0qD5TN4MtwMQZbJuyXdH8QIsZSvvVmKK0Tf5dgYBnTqDKfJnaH/frlIyrFrZs9aj84uHpZPMw1jP6Rrn/gHLn6oNdvkJS668c5ALSvjJoNoqT2l+2TC0p4fNq9H/q0HaLkL+s5Jfkb9ZqPevo3sBQKJvGEEZmgld0U6S95hiGRVhEGqLR90ZbnYpKpHXk09fxva/UgRGGniK4yAJ7noeUsB2HZU8+X88I0TeX7vx0+WHAqV65eA14e2BegKI55JPeX8rXte/Iy0KRkyBQ8KtD5jkfTsmdeLMchdnmys7pu4CGiRXyAANT8uWzP0QifqfZhG6fHqZiMPhOa8XM2Z8KhFgtWH0m8IG/OUZCllWeRyAFTcupa5Jsq3jn+Y/0N2sgeALvBEmhGSN8jTAWa4cetoF//1kk67BaLFpLrc9P2nSGqd5HII7HGL1C8kCbV9Fmz/etX705sB9g9Sg0xFVhNqUvwYUOs9h51MQJLn64zO1Bd0q/U8LN3k71tqidJbsEc9P1JX90U6QbGu2FpQrPFAIz3Y0UnAiCfxyfVxwGvciwAQw5yIo8S2/XbB1wyGY/hWCYy0s4qOl11Dj1YpNwe7Xjbq7cnGfxp2BFC5Ps4O42jeSj7mhpUSyacLG6MavSdSPdrnOAMGKD7Gdz7jBd5/EBFhGmN8roCR+8H/Q5kbUlKfS5kEQR3Xkx8uNHqW8mr8ka7Fbn06vlmCDc09L9sXC6rJOXwIsZ6peqD7e1gPnotGfARHh5D07R3x6v491eS/FVCWao19XUHsaA==
  template:
    metadata:
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: \\"true\\"
      creationTimestamp: null
      name: hasura-sealed-secret
    type: Opaque
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1-feature-branch-1
spec:
  rules:
  - host: test-sample-1-feature-branch-1.dev.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: app
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - test-sample-1-feature-branch-1.dev.fabrique.social.gouv.fr
    secretName: wildcard-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1-feature-branch-1
spec:
  rules:
  - host: test-sample-1-feature-branch-1.dev.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: app-2nd-instance
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - test-sample-1-feature-branch-1.dev.fabrique.social.gouv.fr
    secretName: wildcard-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1-feature-branch-1
spec:
  rules:
  - host: hasura-test-sample-1-feature-branch-1.dev.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: hasura
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - hasura-test-sample-1-feature-branch-1.dev.fabrique.social.gouv.fr
    secretName: wildcard-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1-feature-branch-1
spec:
  rules:
  - host: pgweb-test-sample-1-feature-branch-1.dev.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: pgweb
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pgweb-test-sample-1-feature-branch-1.dev.fabrique.social.gouv.fr
    secretName: wildcard-crt
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-sample-1-feature-branch-1
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "sample-1" with env "preprod" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
  labels:
    application: test-sample-1
    cert: wildcard
  name: test-sample-1-preprod
  namespace: test-sample-1-preprod
---
apiVersion: v1
data:
  ACCOUNT_MAIL_SENDER: contact@fabrique.social.gouv.fr
  GRAPHQL_ENDPOINT: http://hasura/v1/graphql
  NODE_ENV: production
  PRODUCTION: \\"false\\"
kind: ConfigMap
metadata:
  name: app-configmap
  namespace: test-sample-1-preprod
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1-preprod
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1-preprod
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: app-2nd-instance
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1-preprod
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    component: hasura
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1-preprod
spec:
  ports:
  - name: http
    port: 8081
    targetPort: 8081
  selector:
    component: pgweb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1-preprod
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app
  template:
    metadata:
      labels:
        application: test-sample-1
        component: app
    spec:
      containers:
      - env: null
        envFrom:
        - secretRef:
            name: pg-user-preprod
        - secretRef:
            name: app-sealed-secret
        - configMapRef:
            name: app-configmap
        image: ghcr.io/socialgouv/test-sample-1/app:preprod-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: app
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
        volumeMounts: null
      initContainers: null
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1-preprod
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app-2nd-instance
  template:
    metadata:
      labels:
        application: test-sample-1
        component: app-2nd-instance
    spec:
      containers:
      - env: null
        envFrom:
        - secretRef:
            name: pg-user-preprod
        - secretRef:
            name: app-sealed-secret
        - configMapRef:
            name: app-configmap
        image: ghcr.io/socialgouv/test-sample-1/app:preprod-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: app
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
        volumeMounts: null
      initContainers: null
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1-preprod
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hasura
  template:
    metadata:
      labels:
        application: test-sample-1
        component: hasura
    spec:
      containers:
      - env: []
        envFrom:
        - secretRef:
            name: pg-user-preprod
        - secretRef:
            name: hasura-sealed-secret
        - configMapRef:
            name: hasura-configmap
        image: ghcr.io/socialgouv/test-sample-1/hasura:preprod-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: hasura
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 1280Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 30
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
      initContainers: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1-preprod
spec:
  replicas: 1
  selector:
    matchLabels:
      component: pgweb
  template:
    metadata:
      labels:
        application: test-sample-1
        component: pgweb
    spec:
      containers:
      - image: sosedoff/pgweb:0.11.8
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: pgweb
        ports:
        - containerPort: 8081
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /
            port: http
          periodSeconds: 5
      envFrom:
      - secretRef:
          name: pg-user-preprod
      initContainers:
      - env:
        - name: WAIT_FOR_RETRIES
          value: \\"24\\"
        envFrom:
        - secretRef:
            name: pg-user-preprod
        image: ghcr.io/socialgouv/docker/wait-for-postgres:6.56.1
        imagePullPolicy: Always
        name: wait-for-postgres
        resources:
          limits:
            cpu: 20m
            memory: 32Mi
          requests:
            cpu: 5m
            memory: 16Mi
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  annotations:
    sealedsecrets.bitnami.com/cluster-wide: \\"true\\"
  creationTimestamp: null
  name: hasura-sealed-secret
  namespace: test-sample-1-preprod
spec:
  encryptedData:
    ACCOUNT_EMAIL_SECRET: AgCYU5zQRAGub/7BY2VzhhQ/Y5EtYeWcgdBrHMfOdhK6DLDbkiYTVBvdIVbvUp/AtHP8V3UwT0zoQfKRiECwdH6oJ92GJ2DQ6svTNJH+x4EyQRJTeRMOrx6y+iVAcFx6I5RbT6SdKkpzGztpY4t4pGt3IOUoKNrJRqshj170LQqsw57NyxzSgZ0HONNsHE+HUK6AijgZXBthAfWqlFyrg6WIBY1f/jyuZ7jvzlotTI9JXXSBz8LryNYG7kth2weHcmlQKiqERPbWGFuGwM77hzgFwixjqnrGJEjWXDfsAmBLk+B9nVht2H54pPYCD+cyRea5NeisxnNCAOw10BJHEX1gxgNzSwQDVfOSINWT1a8R81tm7Dz7j3LyKKT+UH8BREHMlu4qv7+D6PjrRXJXtAMGN6Vsz0Hqvf6vlZou7O4ygcAtirRaSPvsuU1FOg2JvwfheUVZ7StBGhsTBWyQ0jw9UqAXcjtcbqfzeOc8sEEe/5xyRJctT+A4s4XNGxiF/Mnaa9XB5OHtz55FUDzy2o0S21JXFjnNs2kmDji3gjPwYJzg+qat7ZcGBNMR4KNvu2SiUoDdQMKzmh7mi4nwqlOv08eJVP8ZzXGS3F8QcsMFXPfrH/53hunKq6gQ61D3+CsCN6Hz89X7FgWnMroMv52gNwtUc0yeQ+klIB2RsY6+NefWx0p+ikxHY9MG64qMPtFNG+RW2TwRgcdbD6CC31GUVmGVLpEF95RF7v1i66H9EvNwiRZCagnZ4qYcrQ==
    HASURA_GRAPHQL_ADMIN_SECRET: AgDZX0nGJWSkGYaaTpArKf3L1jsBEzKzsE1qkDIziGJHgVuqdPUhvZwmd6/9yPtkw7ohLh4/yqpQFELURajvHPJy4ZBok5bRhX4eC2tbsEQ+20YmL86KGNUhGSdJ9Ua3m/jV5qEyFnLPBG4cPJL4OjEDNvm/WwJvQfTlXaV4YoZMzlZmPMLFKAQ/8jKoefaIjtTXPq3YSeULlEx94Pv08C5b6o0US4fQwhtBAUOlUmhPEDXo0u4r4yM5w7HGWSCD4Dsb+rHlcRi7ulCCafeaBLITq3BMhzS1eO5XNrLGzh4iDh4rTtv83Y8kFFvb/zXlq/uiPZMoTxaH5eTqYQkCRA3L/2T7hWWiINDB9kbNTIyIZ2uF0W1RLnwgq2VASruNEhxXHYKeQfnhxcqTxGAsTgJgAGhMm17vALEAHt+72L4O822WJw39TB9ozqbnZ0I++ZAmd+kIrZ3Uxp7WfzmM7bKzdqn8L2k0jxHCOKWxChXayONqTFUq9YfJdqSHtNnfi5Bt610SjmD62Vil1hmxIhQv6xmzRwo2pfbhrUj6gNsNdDTrV5fxfZzEOtvwl6C+bPuHmD+qbke78eiJp8A4WIgn1CayHsSoaokH36Q1IW+ETuyQHhz8RMd8ZmrGAeSWUm71SR0nKCWgCwtRX4NhBR5fGR8M7CLTJm3ofrv1fyZ8WKPC7OcnhHmKYBeaw6qku9K+0qRCuvIp/6/dd28SC1obdir77d924ZTkFxUVIAu9J0u0AOEu6UZS
    HASURA_GRAPHQL_JWT_SECRET: AgB0yHuBM57mDtyon+1dEC9PTgejHVGA5uOHbdu5P4tH6CuOgpH2cnbXnBaeD+7d52aCNto7a0qD5TN4MtwMQZbJuyXdH8QIsZSvvVmKK0Tf5dgYBnTqDKfJnaH/frlIyrFrZs9aj84uHpZPMw1jP6Rrn/gHLn6oNdvkJS668c5ALSvjJoNoqT2l+2TC0p4fNq9H/q0HaLkL+s5Jfkb9ZqPevo3sBQKJvGEEZmgld0U6S95hiGRVhEGqLR90ZbnYpKpHXk09fxva/UgRGGniK4yAJ7noeUsB2HZU8+X88I0TeX7vx0+WHAqV65eA14e2BegKI55JPeX8rXte/Iy0KRkyBQ8KtD5jkfTsmdeLMchdnmys7pu4CGiRXyAANT8uWzP0QifqfZhG6fHqZiMPhOa8XM2Z8KhFgtWH0m8IG/OUZCllWeRyAFTcupa5Jsq3jn+Y/0N2sgeALvBEmhGSN8jTAWa4cetoF//1kk67BaLFpLrc9P2nSGqd5HII7HGL1C8kCbV9Fmz/etX705sB9g9Sg0xFVhNqUvwYUOs9h51MQJLn64zO1Bd0q/U8LN3k71tqidJbsEc9P1JX90U6QbGu2FpQrPFAIz3Y0UnAiCfxyfVxwGvciwAQw5yIo8S2/XbB1wyGY/hWCYy0s4qOl11Dj1YpNwe7Xjbq7cnGfxp2BFC5Ps4O42jeSj7mhpUSyacLG6MavSdSPdrnOAMGKD7Gdz7jBd5/EBFhGmN8roCR+8H/Q5kbUlKfS5kEQR3Xkx8uNHqW8mr8ka7Fbn06vlmCDc09L9sXC6rJOXwIsZ6peqD7e1gPnotGfARHh5D07R3x6v491eS/FVCWao19XUHsaA==
  template:
    metadata:
      annotations:
        sealedsecrets.bitnami.com/cluster-wide: \\"true\\"
      creationTimestamp: null
      name: hasura-sealed-secret
    type: Opaque
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1-preprod
spec:
  rules:
  - host: test-sample-1-preprod.dev.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: app
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - test-sample-1-preprod.dev.fabrique.social.gouv.fr
    secretName: wildcard-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1-preprod
spec:
  rules:
  - host: test-sample-1-preprod.dev.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: app-2nd-instance
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - test-sample-1-preprod.dev.fabrique.social.gouv.fr
    secretName: wildcard-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1-preprod
spec:
  rules:
  - host: hasura-test-sample-1-preprod.dev.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: hasura
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - hasura-test-sample-1-preprod.dev.fabrique.social.gouv.fr
    secretName: wildcard-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1-preprod
spec:
  rules:
  - host: pgweb-test-sample-1-preprod.dev.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: pgweb
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pgweb-test-sample-1-preprod.dev.fabrique.social.gouv.fr
    secretName: wildcard-crt
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-sample-1-preprod
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "sample-1" with env "prod" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
  labels:
    application: test-sample-1
  name: test-sample-1
  namespace: test-sample-1
---
apiVersion: v1
data:
  ACCOUNT_MAIL_SENDER: contact@fabrique.social.gouv.fr
  GRAPHQL_ENDPOINT: http://hasura/v1/graphql
  NODE_ENV: production
  PRODUCTION: \\"true\\"
kind: ConfigMap
metadata:
  name: app-configmap
  namespace: test-sample-1
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1
spec:
  ports:
  - name: http
    port: 80
    targetPort: 3000
  selector:
    component: app-2nd-instance
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    component: hasura
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1
spec:
  ports:
  - name: http
    port: 8081
    targetPort: 8081
  selector:
    component: pgweb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app
  template:
    metadata:
      labels:
        application: test-sample-1
        component: app
    spec:
      containers:
      - env: null
        envFrom:
        - secretRef:
            name: pg-user
        - secretRef:
            name: app-sealed-secret
        - configMapRef:
            name: app-configmap
        image: ghcr.io/socialgouv/test-sample-1/app:sha-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: app
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
        volumeMounts: null
      initContainers: null
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1
spec:
  replicas: 1
  selector:
    matchLabels:
      component: app-2nd-instance
  template:
    metadata:
      labels:
        application: test-sample-1
        component: app-2nd-instance
    spec:
      containers:
      - env: null
        envFrom:
        - secretRef:
            name: pg-user
        - secretRef:
            name: app-sealed-secret
        - configMapRef:
            name: app-configmap
        image: ghcr.io/socialgouv/test-sample-1/app:sha-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: app
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
        volumeMounts: null
      initContainers: null
      volumes: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1
spec:
  replicas: 1
  selector:
    matchLabels:
      component: hasura
  template:
    metadata:
      labels:
        application: test-sample-1
        component: hasura
    spec:
      containers:
      - env: []
        envFrom:
        - secretRef:
            name: pg-user
        - secretRef:
            name: hasura-sealed-secret
        - configMapRef:
            name: hasura-configmap
        image: ghcr.io/socialgouv/test-sample-1/hasura:sha-ffac537e6cbbf934b08745a378932722df287a53
        livenessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: hasura
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 1280Mi
          requests:
            cpu: 50m
            memory: 128Mi
        startupProbe:
          failureThreshold: 30
          httpGet:
            path: /healthz
            port: http
          periodSeconds: 5
      initContainers: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kapp.k14s.io/disable-default-label-scoping-rules: \\"\\"
    kapp.k14s.io/disable-default-ownership-label-rules: \\"\\"
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1
spec:
  replicas: 1
  selector:
    matchLabels:
      component: pgweb
  template:
    metadata:
      labels:
        application: test-sample-1
        component: pgweb
    spec:
      containers:
      - image: sosedoff/pgweb:0.11.8
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
        name: pgweb
        ports:
        - containerPort: 8081
          name: http
        readinessProbe:
          failureThreshold: 15
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 64Mi
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /
            port: http
          periodSeconds: 5
      envFrom:
      - secretRef:
          name: pg-user
      initContainers:
      - env:
        - name: WAIT_FOR_RETRIES
          value: \\"24\\"
        envFrom:
        - secretRef:
            name: pg-user
        image: ghcr.io/socialgouv/docker/wait-for-postgres:6.56.1
        imagePullPolicy: Always
        name: wait-for-postgres
        resources:
          limits:
            cpu: 20m
            memory: 32Mi
          requests:
            cpu: 5m
            memory: 16Mi
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: hasura-sealed-secret
  namespace: test-sample-1
spec:
  encryptedData:
    ACCOUNT_EMAIL_SECRET: AgBc+UqJhU2ZBfuplyiI3pPekRjm36i62WYR1lVpM9PIwK636R78mpfckIeGU09qKAxWGYBqtYtvNP3lTG8OwEUqKLnUxZPZKbtwc78GwzEzaPpnWmM+j78uBDxqHDiW+jKwnD/6XiWxsfyd1ZU/qS0LDEJBnVRoDyUI0NxzFWLxG8ylr6oK3q+oD3338D588TimklZGOvRm/hI95d5uwKsYPz0zYOj28pgHzNMVycreOXi9l562agyg2hdb8AkFD41utLEURxJOomJUl2xZIjv6FX++R9OJQzRsX6WsCAkLZPO7VEi1cvG6QzPf/uchwystfQfW5c+5ofVJer5mLJJjFcO8OfNbsg/JYlndv4F90cjH2dojSHv/qH/ddpObPgkDpVzCljdTvrir5bl3z3KeqLb20ja1hLJlwOue4zHDCQ6Fwza8VN6BjbHZLYhOO5qlYfWezjwt+B6RdFVzD8wu2JbuWsJo5w2HhMl2Nckar1B8CPxzgRXnFwc/QsFTDXOXX+rtxnC4FJfffZ/2frV745c642AhOArDxk8OGDFkrexr5OMv0iJcY15cl6K9dfZWOKfFd5mxfWFhDWUSAoUZJsz4uVxpTCCoSJBe8Nf1aKk7PkZ+bXtV5bpuktySoPh0hG1M1dUg0WsSC2i6zp75AUxVW6c4GG7d9FMsTHIwyD7fEbV3TMRanSRFYNPOmft/oI7Q3oNGOGg26KCtX414FG02EnpmrttHQguY7cnHGG7i7s8mnyGv
    HASURA_GRAPHQL_ADMIN_SECRET: AgAQ9npiVSZcI8IA6kHHQ9tMaKYahCPmiYh9PoEmKIvisGCM4hQ2Q+UUoUvA2N3Id/GCxNZh3hqmTjLp+mHPy0e8rr9+/WVB5jrrqWO/oX2R1kXq0dbITF27UOjmTaUkZefPf7diHKpCXKGamkP6YbVuZa+1BBmBBfkIDJsraKO1CS/EO0QZAb0fHJiOkNy30j4pTTlg16JdugEj3kXdXXXZD/F8OyvlLBY1jivC/uFMGppNh1eRivgi4Y+krCDCuLphAa5YVslLMf7bboDD5Tk1b2HOCNYxQ96dxvkqCVtNd2rxXfDsYy9vMbQfYnsBjsIT7VZhk3GaMpVmPTRjp89XQDvj86+PrPtuFlgmfLrNvbvcqJ30y5lkD46c4Bd9zgwN4FeeVuY/oCKgfrN1qdCOT+ZYchkVQuCbKT+qK0gfOkYRt+B5feL5MtaEXX2MyhPS8wCvNLyAEth6NbmYxdXOPBXQrfGNcZYg/qjeB/muAzkd4wEPsR9ExoY5envlJ8Mx8LUQ/7A2tRp1jd+uy8s1hdb94BgOhcCqgzdqRkIVp40GiVHzVkFWQEkMEoX1Mw4iifs0QtAZu8qPyFWYORf9fty8zG/WX0RStdYbTuahCLb+Vqs2A5UEbg8nRdfl16aZJ3RY2fIoF1kYNG7XiZmp+bltOOqvYcOBnAr3Dy/y1PV1NrBMCULxibM57+nRyXrJe6TYLrJWPnp7meLLKppKPN3tgvx21s1/8bpbxC0xgshPZFgXQXgB
    HASURA_GRAPHQL_JWT_SECRET: AgAyuiPLqj0UMvhEkyEGF04LOp8al2O59/YGOei4hfkqcEw83rmJnb/o3nz96oLYG4gX/JlMT8grhUmR8wPG+Ah5UDuGK9POP75YYyNDQ05FrMDPCjQtEXNslqNp+oVS91ONUwJ7ARUr47vfQdxRoK03cFCboY0wEF8HMZzRjn5fXccttyT21kJV75Y0MtCif5jNCj+gtX2DIP9dNfvAJKCvOCzNJDALLmhv4tY71ZquGAiXf/+mJVP5ugRjFL0wYoKThAr3vph5cOPUo44swVilESu54gAoRlPNxFgOBXHS5Uu0VWryzTJyQGOElkYCxyBC45YzFZGMB3RWxaZtuForw76bD0RYWTVNsI+N/KmZdbYZO5Cs6HdqE2nptb3QAgpH0JOeWnzZGxTmkSOpEwCUGCJG+7ApPB5obIaVMZG39lWvZc/VTBZkTr7ufvOyIvwtYc9eh+AiNSy02gUXMzIkxK/eyWmKXowJcqXYK8K9iIgkLfMclUdWFQtHCN0h4OEyenRreP9qX8E34eeZ1ZwiDgJGOki8Ys4bphaFjSXZd82KRwuHDTIamAEGCUm7rLW9yOGE77AJpBTdqt2Qz9SUCXWbJewukbvtZwVtAEpEI/O+/KKNinObH0Lmhj8bRLn01rLgt9WsB972vEjboyzkT2gC7/G2Nx8O3IFiiJ9Ki5/hko5A4oorXdkCfuP7UfiKFR/pkXKqCOMrqi7uD7N0/qNtZ2j3satfeInOEldn1M6h7mz2IiRdszxq/RTsdFEO6h3X3lZLELXcDjgkZqCMXaPToAPRS2EKi6Ihs151VepGAerGOeq+DL+NU1aOwenivXe91vqDm9O0Cc3K756VBkUZA7ufFp3RKujk5fWygk0N8w0Zd9qU/tL7NqE/5n8xIdknzBI+qoHCrrOTnyMUpUEPuYbxY2lYkhb/4Afzte2nyM0K50I/4imEYWVsC+vNQ59OeYCoYcJBe19D+dm2rfxvYgy/H7scFjsl9rwCe23aPWQOJBJvcEnmgKOMRkG0cw6gvhBPVZ2w8gvIAfffLsj+zsag1izfgzcaajrfRr/kkxYk6R6Gz5tdjYSUz6P1Xk8LyCyB6st9IE433qlel4bwxjwh1CYz3pGUvAwj+TKsAF4xeiFd/LN3nitE74yGAOerbB/MrQqCcGbD6Anz2DWaFkhRxYKlJQsyy1rsxPzfo2wr8W/zpX7Jf17fHXJ96OG/WV2uZvudw7EjVdvxLhauabodjh3eC1/Kn9yvxJ5GTQLjJ04C/o7QgiIz+vNyxSqfvWf6zAsPJrAoHZXXoPbOaZVG2Sx1eWrhEIi8eV2z1x54SKLM0yy8lRTc2170AhLxqf4PaDTMR4ZTkhaIwPONeAIdHGnk3DVgYa/97WNO3j48ZnXwjKvp8mcKoe2Q9Y3WYuu4XafZg9UdDLbtePJiBlSF42uUbZsS4/oEU8ErRyodcOQPUYEM5SGuxceTvyxi6v7zhgYv3TiwWGgkoxznvFZ9H8m3SN0hCY4TINo9bnBAm2XRzZrhmGRpoKTOvQbkIXKoOzKeoQRgopjUdWW5X4EcKOW76X7B20x+2sPVkqwN/u5KFX3+HY3z1ui1+nIIKlbjUCY17QwxuVDP7yMU6xeBhtwUz0FkFGyHuSbrk+NhpA==
  template:
    metadata:
      creationTimestamp: null
      name: hasura-sealed-secret
    type: Opaque
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: \\"true\\"
  labels:
    application: test-sample-1
    component: app
  name: app
  namespace: test-sample-1
spec:
  rules:
  - host: test-sample-1.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: app
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - test-sample-1.fabrique.social.gouv.fr
    secretName: test-sample-1-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: \\"true\\"
  labels:
    application: test-sample-1
    component: app-2nd-instance
  name: app-2nd-instance
  namespace: test-sample-1
spec:
  rules:
  - host: test-sample-1.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: app-2nd-instance
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - test-sample-1.fabrique.social.gouv.fr
    secretName: test-sample-1-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: \\"true\\"
  labels:
    application: test-sample-1
    component: hasura
  name: hasura
  namespace: test-sample-1
spec:
  rules:
  - host: hasura-test-sample-1.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: hasura
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - hasura-test-sample-1.fabrique.social.gouv.fr
    secretName: test-sample-1-crt
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: \\"true\\"
  labels:
    application: test-sample-1
    component: pgweb
  name: pgweb
  namespace: test-sample-1
spec:
  rules:
  - host: pgweb-test-sample-1.fabrique.social.gouv.fr
    http:
      paths:
      - backend:
          service:
            name: pgweb
            port:
              name: http
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - pgweb-test-sample-1.fabrique.social.gouv.fr
    secretName: test-sample-1-crt
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-sample-1
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "volume-add" with env "dev" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
    janitor/ttl: 7d
  labels:
    application: test-volume-add
    cert: wildcard
  name: test-volume-add-feature-branch-1
  namespace: test-volume-add-feature-branch-1
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-volume-add-feature-branch-1
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "volume-add" with env "preprod" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
  labels:
    application: test-volume-add
    cert: wildcard
  name: test-volume-add-preprod
  namespace: test-volume-add-preprod
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-volume-add-preprod
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;

exports[`build manifests for test "volume-add" with env "prod" 1`] = `
"apiVersion: v1
kind: Namespace
metadata:
  annotations:
    field.cattle.io/projectId: \\"1234\\"
    git/branch: refs/heads/feature-branch-1
  labels:
    application: test-volume-add
  name: test-volume-add
  namespace: test-volume-add
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: netpol-ingress
  namespace: test-volume-add
spec:
  ingress:
  - from:
    - podSelector: {}
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: ingress-controller
  - from:
    - namespaceSelector:
        matchLabels:
          network-policy/source: monitoring
  podSelector: {}
  policyTypes:
  - Ingress
"
`;
