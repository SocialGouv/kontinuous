name: "Autodevops deploy"
description: "Autodevops deploy using Helm template and kapp"
inputs:
  token:
    description: "The github authentication token"
  webhookToken:
    description: "The webhook authentication token, usually secrets.KUBEWEBHOOK_TOKEN"
  webhookUri:
    description: "The webhook uri"
outputs:
  url:
    description: "Main deployment URL"
    value: ${{ steps.environment-url.outputs.url }}

runs:
  using: "composite"
  steps:
    
    - name: Init
      shell: bash
      id: environment
      run: |
        npm i -g kontinuous

        if [ -n "$GITHUB_HEAD_REF" ]; then
          KS_GIT_BRANCH=$GITHUB_HEAD_REF
        else
          KS_GIT_BRANCH=$GITHUB_REF
        fi
        KS_GIT_BRANCH=${KS_GIT_BRANCH#refs/heads/}
        KS_GIT_BRANCH=${KS_GIT_BRANCH#refs/tags/}
        KS_GIT_BRANCH_URLENCODED=$(echo $KS_GIT_BRANCH | sed 's/\//\%2f/g')
        if [[ "$KS_GIT_BRANCH" =~ ^v[0-9]+\.[0-9]+ ]]; then
          EVENT_NAME=created
        else
          EVENT_NAME=pushed
        fi

        WEBHOOK_URI=${{ inputs.webhookUri }}
        
        KS_GIT_REPOSITORY=$GITHUB_REPOSITORY
        KS_GIT_REPOSITORY_URLENCODED=$(echo $KS_GIT_REPOSITORY | sed 's/\//\%2f/g')
        
        KS_GIT_SHA=$

        export KS_GIT_REPOSITORY
        export KS_GIT_BRANCH
        export KS_GIT_SHA

        ENV=$(npx kontinuous env)
        echo "::set-output name=env::$ENV"

        echo "WEBHOOK_URI=$WEBHOOK_URI">>$GITHUB_ENV
        echo "KS_WEBHOOK_TOKEN=${{ inputs.webhookToken }}">>$GITHUB_ENV
        echo "KS_GIT_BRANCH=$KS_GIT_BRANCH">>$GITHUB_ENV
        echo "KS_GIT_BRANCH_URLENCODED=$KS_GIT_BRANCH_URLENCODED">>$GITHUB_ENV
        echo "KS_GIT_SHA=$GITHUB_SHA">>$GITHUB_ENV
        echo "KS_GIT_REPOSITORY=$KS_GIT_REPOSITORY">>$GITHUB_ENV
        echo "KS_GIT_REPOSITORY_URLENCODED=$KS_GIT_REPOSITORY_URLENCODED">>$GITHUB_ENV
        echo "EVENT_NAME=$EVENT_NAME">>$GITHUB_ENV

    - name: Handle action rerun
      shell: bash
      run: |
        if [ "$GITHUB_RUN_ATTEMPT" -gt "1" ]; then
          echo "Trigger webhook for rerun attempt #${GITHUB_RUN_ATTEMPT}"
          wget --content-on-error -qO- \
            --post-data "{\"repositoryUrl\":\"${KS_GIT_REPOSITORY}\",\"ref\":\"${KS_GIT_BRANCH}\",\"commit\":\"${KS_GIT_SHA}\"}" \
            --header='Content-Type:application/json' \
            "${WEBHOOK_URI}/api/v1/oas/hooks/user?event=${EVENT_NAME}&token=${KS_WEBHOOK_TOKEN}"
        fi

    - name: Stream logs of kube pipeline
      shell: bash
      run: |
        # wget --content-on-error -qO- "${WEBHOOK_URI}/api/v1/oas/logs/pipeline?repository=${KS_GIT_REPOSITORY_URLENCODED}&event=${EVENT_NAME}&ref=${KS_GIT_BRANCH_URLENCODED}&commit=${KS_GIT_SHA}&catch=true&follow=true&token=${KS_WEBHOOK_TOKEN}"
        npx kontinuous logs
    
    - name: Download manifests artifact
      shell: bash
      run: |
        # wget --content-on-error -q -O manifests.yaml "${WEBHOOK_URI}/api/v1/oas/artifacts/download?repository=${KS_GIT_REPOSITORY_URLENCODED}&branch=${KS_GIT_BRANCH_URLENCODED}&commit=${KS_GIT_SHA}&token=${KS_WEBHOOK_TOKEN}"
        npx kontinuous download manifests manifests.yaml

    - name: Archive manifest
      uses: actions/upload-artifact@v2
      with:
        name: manifests.yaml
        path: manifests.yaml

    - name: Get status of pipeline
      shell: bash
      run: |
        wget --content-on-error -q -O deployment-status.json "${WEBHOOK_URI}/api/v1/oas/artifacts/status?repository=${KS_GIT_REPOSITORY_URLENCODED}&branch=${KS_GIT_BRANCH_URLENCODED}&commit=${KS_GIT_SHA}&token=${KS_WEBHOOK_TOKEN}"
        DEPLOYMENT_STATUS=$(cat deployment-status.json)
        echo "status: " $(echo "$DEPLOYMENT_STATUS" | jq .status)
        OK=$(echo "$DEPLOYMENT_STATUS" | jq .ok)
        if [ "$OK" != "true" ]; then
          exit 1
        fi

    - name: Setup namespace env var
      shell: bash
      run: |
        NAMESPACE=$(cat manifests.yaml | yq eval-all 'select(.kind=="Namespace").metadata.name')
        echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV

    - name: Notify deployment start
      uses: bobheadxi/deployments@v1
      id: deployment
      with:
        step: start
        token: ${{ inputs.token }}
        desc: "Deploying environment: ${{ env.NAMESPACE }}"
        env: ${{ steps.environment.outputs.env == 'dev' && env.NAMESPACE || steps.environment.outputs.env == 'preprod' && 'preproduction' || 'production' }}
    
    - name: Define environment URL
      id: environment-url
      shell: bash
      run: |
        HOSTS=$(cat manifests.yaml | yq eval-all '.spec.rules[] .host')
        HOST=$(echo "$HOSTS" | head -n 1)
        echo $HOST
        echo "::set-output name=url::https://$HOST"

    - name: Notify deployment end
      uses: bobheadxi/deployments@v1
      with:
        step: finish
        status: ${{ job.status }}
        token: ${{ inputs.token }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
        env_url: ${{ steps.environment-url.outputs.url }}
        env: ${{ steps.deployment.outputs.env }}

    - name: Debug manifests
      uses: SocialGouv/actions/k8s-manifests-debug@v1
      with:
        token: ${{ inputs.token }}
        path: manifests.yaml
