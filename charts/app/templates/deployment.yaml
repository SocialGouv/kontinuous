apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: {{ or .Values.component .Chart.Name }}
    application: {{ .Values.global.repositoryName }}
  name: {{ or .Values.component .Chart.Name }}
  namespace: {{ .Values.global.namespace }}
  annotations:
    kapp.k14s.io/nonce: ""
    kapp.k14s.io/update-strategy: fallback-on-replace
    kapp.k14s.io/change-group: "autodevops/{{ .Values.global.namespace }}"
    kapp.k14s.io/change-group.{{ or .Values.component .Chart.Name }}: "autodevops/{{ or .Values.component .Chart.Name }}.{{ .Values.global.namespace }}"
    {{- range $need := .Values.needs }}
    kapp.k14s.io/change-rule.{{ $need }}: "upsert after upserting autodevops/{{ $need }}.{{ .Values.global.namespace }}"
    {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      component: {{ or .Values.component .Chart.Name }}
  template:
    metadata:
      labels:
        component: {{ or .Values.component .Chart.Name }}
        application: {{ .Values.global.repositoryName }}
    spec:
      initContainers:
      {{- if .Values.waitForPostgres }}
        {{- include "init-containers.wait-for-postgres" . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if gt (len .Values.volumes) 0 }}
        {{- tpl (.Values.volumes | toYaml) . | nindent 8 }}
        {{- end }}
        {{- range $volumeName := .Values.addVolumes }}
        - name: "{{ tpl $volumeName $ }}"
          persistentVolumeClaim:
            claimName: "{{ tpl $volumeName $ }}"
        {{- end }}
      containers:
        - image: "{{ or .Values.registry .Values.global.registry }}/{{ or .Values.imageName .Values.global.imageName }}{{ if .Values.imagePackage }}{{ (print "/" .Values.imagePackage) }}{{ end }}:{{ or .Values.imageTag .Values.global.imageTag }}"
          livenessProbe:
            failureThreshold: 15
            httpGet:
              path: {{ .Values.probesPath }}
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
          name: app
          ports:
            - containerPort: {{ .Values.containerPort }}
              name: http
          readinessProbe:
            failureThreshold: 15
            httpGet:
              path: {{ .Values.probesPath }}
              port: http
            initialDelaySeconds: 0
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          startupProbe:
            failureThreshold: 12
            httpGet:
              path: {{ .Values.probesPath }}
              port: http
            periodSeconds: 5
          env:
            {{- if gt (len .Values.env) 0 }}
            {{- tpl (.Values.env | toYaml) . | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if gt (len .Values.envFrom) 0 }}
            {{- tpl (.Values.envFrom | toYaml) . | nindent 12 }}
            {{- end }}
          volumeMounts:
            {{- if gt (len .Values.volumeMounts) 0 }}
            {{- tpl (.Values.volumeMounts | toYaml) . | nindent 12 }}
            {{- end }}
            {{- range $volumeName := .Values.addVolumes }}
            - name: "{{ tpl $volumeName $ }}"
              mountPath: "/mnt/{{ tpl $volumeName $ }}"
            {{- end }}