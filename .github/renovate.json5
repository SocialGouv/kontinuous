{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:base",
    "docker:enableMajor",
    ":maintainLockFilesMonthly",
    ":dependencyDashboard",
    ":preserveSemverRanges",
    ":prHourlyLimit4",
    ":semanticCommits",
    ":timezone(Europe/Paris)"
  ],
  "enabledManagers": [
    "regex",
    "npm",
    "nvm",
    "helm-values",
    "helmv3",
    "docker-compose",
    "dockerfile",
    "github-actions",
    "gitlabci",
  ],
  "dependencyDashboardAutoclose": true,
  "postUpdateOptions": ["yarnDedupeHighest"],
  "rangeStrategy": "bump",
  "ignorePresets": ["group:allNonMajor"],
  "labels": ["dependencies"],
  "packageRules": [
    {
      "matchPackagePatterns": ["*"],
      "matchDepTypes": ["dependencies"],
      "matchUpdateTypes": ["minor", "patch"],
      "groupName": "all non-major dependencies",
      "groupSlug": "all-dependencies-minor-patch"
    },
    {
      "matchPackagePatterns": ["*"],
      "matchDepTypes": ["devDependencies"],
      "matchUpdateTypes": ["minor", "patch"],
      "groupName": "all non-major dev dependencies",
      "groupSlug": "all-devdependencies-minor-patch"
    }
  ],
  "regexManagers": [
    // https://docs.renovatebot.com/modules/manager/regex/
    // https://docs.renovatebot.com/modules/datasource/
    {
      "fileMatch": ["^Dockerfile$"],
      "matchStrings": ["ENV NODE_VERSION=(?<currentValue>.*?)\\n"],
      "depNameTemplate": "node",
      "datasourceTemplate": "node"
    },
    {
      "fileMatch": ["^Dockerfile$"],
      "matchStrings": ["ENV KAPP_VERSION=(?<currentValue>.*?)\\n"],
      "depNameTemplate": "github-release",
      "versioningTemplate": "regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)?$",
      "datasourceTemplate": "docker"
    },
    {
      "fileMatch": ["^Dockerfile$"],
      "matchStrings": [
        "datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\sARG .*?_VERSION=(?<currentValue>.*)\\s"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}regex:^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)?${{/if}}"
    },
    {
      "fileMatch": ["^versions.js$"],
      "matchStrings": [
        "datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?\\s.*?: \"(?<currentValue>.*)\"\\s"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}^v?(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)?{{/if}}"
    }
  ]
}