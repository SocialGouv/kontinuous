{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/socialgouv/kontinuous/xxx",
  "title": "schema for .kontinuous/values.yaml",
  "type": "object",
  "additionalProperties": {
    "type": "object",
    "description": "Custom component",
    "additionalProperties": true,
    "properties": {
      "~chart": { "type": "string" }
    },
    "if": {
      "properties": {
        "~chart": {
          "const": "app"
        }
      }
    },
    "then": {
      "description": "Deployment + service + ingress triad",
      "$ref": "#/definitions/chart-app"
    }
  },

  "properties": {
    "global": {
      "description": "Global variables",
      "type": "object",
      "additionalProperties": true
    },
    "project": { "type": "object", "additionalProperties": true },
    "jobs": {
      "description": "Kubernetes jobs definitions",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "~chart": {
          "description": "Chart to use. defaults to jobs",
          "type": "string",
          "pattern": "jobs"
        },
        "runs": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "use": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "entrypoint": {
                "description": "Docker image entrypoint arguments",
                "examples": ["['sh', '-c', 'echo 42']"],
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "checkout": {
                "description": "Should the repo be checked-out to build. defaults to true",
                "type": "boolean"
              },
              "memoryLimit": {
                "description": "Kubernetes max memory for the Job before OOMKill",
                "type": "string"
              },
              "memoryRequest": {
                "description": "Kubernetes memory reservation for the Job",
                "type": "string"
              },
              "cpuLimit": {
                "description": "Kubernetes max cpu for the Job before capping",
                "type": "string"
              },
              "cpuRequest": {
                "description": "Kubernetes cpu reservation for the Job",
                "type": "string"
              },
              "with": { "type": "object", "additionalProperties": true }
            },
            "required": ["use"],
            "allOf": [
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "build",
                      "description": "Build and register docker image"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-build"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "create-db",
                      "description": "Create a Postgres Database"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-create-db"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "deactivate",
                      "description": "Destroy namespace and databasees"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-deactivate"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "drop-db",
                      "description": "Destroy the databasee"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-drop-db"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "pg-restore",
                      "description": "Restore the database from a backup storage"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-pg-restore"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "psql",
                      "description": "Execute psql commands on the database"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-psql"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "seed-db",
                      "description": "Execute a repository .sql on the database"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-seed-db"
                    }
                  },
                  "required": ["with"]
                }
              }
            ]
          },
          "properties": {}
        }
      },
      "required": ["~chart", "runs"]
    }
  },
  "required": [],
  "definitions": {
    "build-args": {
      "description": "Build args to customize the docker build",
      "type": "object",
      "additionalProperties": true
    },
    "job-build": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "dockerfile": {
          "description": "Path to the Dockerfile on the repository. Defaults to /Dockerfile",
          "type": "string"
        },
        "context": {
          "description": "Docker context (cwd) when building the image. Defaults to .",
          "type": "string"
        },
        "registrySecretRefName": {
          "description": "Name of the registry secret if you have a custom docker registry. Should contain CI_REGISTRY_USER, CI_REGISTRY_PASSWORD",
          "type": "string"
        },
        "registry": {
          "description": "Url of your custom docker registry",
          "type": "string"
        },
        "imagePackage": {
          "description": "Name of the dockerfile on the registry",
          "type": "string"
        },
        "imageProject": {
          "description": "Optional project name in the docker registry",
          "type": "string"
        },
        "imageRepository": {
          "description": "Optional sub repository for the docker image",
          "type": "string"
        },
        "buildArgs": {
          "$ref": "#/definitions/build-args"
        },
        "target": {
          "description": "??",
          "type": "string"
        }
      },
      "required": ["imagePackage"]
    },
    "job-create-db": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgAdminSecretRefName": {
          "description": "Secret with admin credentials to the database server",
          "type": "string"
        },
        "pgSecretName": {
          "description": "Name of the kubernetes user secret to create. Defaults to pg-user",
          "type": "string"
        },
        "database": {
          "description": "Name of the Postgres database to create. Defaults to environment",
          "type": "string"
        },
        "pgUser": {
          "description": "Name of the Postgres user to create",
          "type": "string"
        },
        "extensions": {
          "description": "List of Postgres extensions to create in the new database. Defaults to `hstore pgcrypto citext uuid-ossp postgis pg_trgm unaccent`",
          "type": "string"
        },
        "useAzureFlex": {
          "description": "Use an Azure Flex database. defaults to false",
          "type": "boolean"
        }
      },
      "required": ["database", "pgUser"]
    },
    "job-deactivate": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgAdminSecretRefName": {
          "description": "Secret with admin credentials to the database server",
          "type": "string"
        },
        "database": {
          "description": "Name of the Postgres database to destroy. Defaults to environment",
          "type": "string"
        },
        "db": {
          "description": "Name of the Postgres database to destroy. Defaults to environment",
          "type": "string"
        }
      },
      "required": ["database", "db"]
    },
    "job-drop-db": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgAdminSecretRefName": {
          "description": "Secret with admin credentials to the database server",
          "type": "string"
        },
        "database": {
          "description": "Name of the Postgres database to destroy.",
          "type": "string"
        },
        "databaseUser": {
          "description": "Name of the Postgres user to destroy.",
          "type": "string"
        }
      },
      "required": ["database", "databaseUser"]
    },
    "job-pg-restore": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgAdminSecretRefName": {
          "description": "Secret with admin credentials to the database server",
          "type": "string"
        },
        "restorePath": {
          "description": "Path to .sql file in the repo",
          "type": "string"
        },
        "mountPath": {
          "description": "Path to the backup storage mount",
          "type": "string"
        },
        "owner": {
          "description": "Change restored database owner",
          "type": "string"
        },
        "database": {
          "description": "Name of the Postgres database to restore to",
          "type": "string"
        }
      },
      "required": ["restorePath", "databaseUser"]
    },
    "job-psql": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgSecretRefName": {
          "description": "Secret with Postgresql credentials to execute the script",
          "type": "string"
        },
        "sqlFile": {
          "description": "Path to .sql file in the repo",
          "examples": ["./scripts/restore.sql"],
          "type": "string"
        }
      },
      "required": ["pgSecretRefName", "sqlFile"]
    },
    "job-seed-db": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgSecretRefName ": {
          "description": "Secret with Postgresql credentials to execute the script",
          "type": "string"
        },
        "seedPath": {
          "description": "Path to .sql file in the repo",
          "type": "string"
        }
      },
      "required": ["pgSecretRefName", "seedPath"]
    },
    "chart-app": {
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "^\\.": { "type": ["string", "number", "boolean"] }
      },
      "properties": {
        "~chart": {
          "description": "Base HELM Chart for this component",
          "type": "string",
          "examples": ["app", "maildev"]
        },
        "~needs": {
          "description": "Job or deployment dependencies",
          "type": "array",
          "items": {
            "type": "string"
          },
          "examples": ["[build-app]"]
        },
        "imagePackage": {
          "description": "Name of the dockerfile on the registry",
          "type": "string"
        },
        "imageProject": {
          "description": "Optional project name in the docker registry",
          "type": "string"
        },
        "imageRepository": {
          "description": "Optional sub repository for the docker image",
          "type": "string"
        },
        "probesPath": {
          "description": "Path to application health probe. Defaults to /healthz",
          "type": "string",
          "examples": ["/healthz"]
        },
        "probesPort": {
          "description": "Port for probes calls",
          "type": ["string", "number"]
        },
        "containerPort": {
          "description": "Container port, defaults to 3000",
          "type": ["string", "number"]
        },
        "host": {
          "description": "Hostname for the deployment",
          "type": "string"
        },
        "ingress": {
          "type": "object",
          "properties": {
            "path": {
              "description": "URL path to map the ingress to",
              "type": "string",
              "examples": ["/"]
            },
            "annotations": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "certSecretName": {
          "description": "Name of existing SSL cert secret if any.",
          "type": "string"
        },
        "env": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": { "type": "string" },
              "value": { "type": "string" }
            }
          }
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "description": "EnvFromSource represents the source of a set of ConfigMaps",
            "properties": {
              "configMapRef": {
                "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": ["string", "null"]
                  },
                  "optional": {
                    "description": "Specify whether the ConfigMap must be defined",
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "prefix": {
                "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
                "type": ["string", "null"]
              },
              "secretRef": {
                "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": ["string", "null"]
                  },
                  "optional": {
                    "description": "Specify whether the Secret must be defined",
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": ["array", "null"]
        },
        "vars": { "type": "object", "additionalProperties": true },
        "volumes": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": { "type": "string" },
              "persistentVolumeClaim": {
                "type": "object",
                "additionalProperties": false,
                "properties": { "claimName": { "type": "string" } }
              }
            }
          }
        },
        "volumeMounts": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": { "type": "string" },
              "mountPath": {
                "type": "string",
                "description": "Mount path on the container"
              }
            }
          }
        }
      }
    }
  }
}
