{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "$id": "https://socialgouv.github.com/kontinuous/values.schema.json",
  "title": "schema for .kontinuous/values.yaml",
  "type": "object",
  "additionalProperties": {
    "type": "object",
    "description": "Custom component",
    "anyOf": [
      {
        "$ref": "#"
      },
      {
        "if": {
          "required": ["~chart"]
        },
        "then": {
          "description": "Common to all charts",
          "$ref": "#/definitions/chart"
        }
      },
      {
        "if": {
          "required": ["~chart"],
          "properties": {
            "~chart": {
              "const": "app"
            }
          }
        },
        "then": {
          "description": "Deployment + service + ingress triad",
          "$ref": "#/definitions/chart-app"
        }
      }
    ]
  },
  "properties": {
    "global": {
      "description": "Global variables",
      "type": "object",
      "additionalProperties": true
    },
    "project": { "type": "object", "additionalProperties": true },
    "jobs": {
      "description": "Kubernetes jobs definitions",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "~chart": {
          "description": "Chart to use. defaults to jobs",
          "type": "string",
          "pattern": "jobs"
        },
        "runs": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "use": {
                "type": "string"
              },
              "image": {
                "type": "string"
              },
              "entrypoint": {
                "description": "Docker image entrypoint arguments",
                "examples": ["['sh', '-c', 'echo 42']"],
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "checkout": {
                "description": "Should the repo be checked-out to build. defaults to true",
                "type": "boolean"
              },
              "memoryLimit": {
                "description": "Kubernetes max memory for the Job before OOMKill",
                "type": "string"
              },
              "memoryRequest": {
                "description": "Kubernetes memory reservation for the Job",
                "type": "string"
              },
              "cpuLimit": {
                "description": "Kubernetes max cpu for the Job before capping",
                "type": "string"
              },
              "cpuRequest": {
                "description": "Kubernetes cpu reservation for the Job",
                "type": "string"
              },
              "with": { "type": "object", "additionalProperties": true }
            },
            "required": ["use"],
            "allOf": [
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "build",
                      "description": "Build and register docker image"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-build"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "create-db",
                      "description": "Create a Postgres Database"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-create-db"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "deactivate",
                      "description": "Destroy namespace and databasees"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-deactivate"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "drop-db",
                      "description": "Destroy the databasee"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-drop-db"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "pg-restore",
                      "description": "Restore the database from a backup storage"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-pg-restore"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "psql",
                      "description": "Execute psql commands on the database"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-psql"
                    }
                  },
                  "required": ["with"]
                }
              },
              {
                "if": {
                  "properties": {
                    "use": {
                      "const": "seed-db",
                      "description": "Execute a repository .sql on the database"
                    }
                  }
                },
                "then": {
                  "properties": {
                    "with": {
                      "$ref": "#/definitions/job-seed-db"
                    }
                  },
                  "required": ["with"]
                }
              }
            ]
          },
          "properties": {}
        }
      },
      "required": ["runs"]
    }
  },
  "required": [],
  "definitions": {
    "build-args": {
      "description": "Build args to customize the docker build",
      "type": "object",
      "additionalProperties": true
    },
    "job-build": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "dockerfile": {
          "description": "Path to the Dockerfile on the repository. Defaults to /Dockerfile",
          "type": "string"
        },
        "context": {
          "description": "Docker context (cwd) when building the image. Defaults to .",
          "type": "string"
        },
        "registrySecretRefName": {
          "description": "Name of the registry secret if you have a custom docker registry. Should contain CI_REGISTRY_USER, CI_REGISTRY_PASSWORD",
          "type": "string"
        },
        "registry": {
          "description": "Url of your custom docker registry",
          "type": "string"
        },
        "imagePackage": {
          "description": "Name of the dockerfile on the registry",
          "type": "string"
        },
        "imageProject": {
          "description": "Optional project name in the docker registry",
          "type": "string"
        },
        "imageRepository": {
          "description": "Optional sub repository for the docker image",
          "type": "string"
        },
        "buildArgs": {
          "$ref": "#/definitions/build-args"
        },
        "skipExisting": {
          "description": "Skip build if image already registerd",
          "type": "boolean"
        },
        "buildOptions": {
          "description": "Build options",
          "type": "string",
          "examples": ["-single-snapshot --ignore-path=/product_uuid"]
        },
        "target": {
          "description": "??",
          "type": "string"
        }
      },
      "required": ["imagePackage"]
    },
    "job-create-db": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgAdminUserSecretRefName": {
          "description": "Secret with admin credentials to the database server",
          "type": "string"
        },
        "pgSecretName": {
          "description": "Name of the kubernetes user secret to create. Defaults to pg-user",
          "type": "string"
        },
        "database": {
          "description": "Name of the Postgres database to create. Defaults to environment",
          "type": "string"
        },
        "pgUser": {
          "description": "Name of the Postgres user to create",
          "type": "string"
        },
        "extensions": {
          "description": "List of Postgres extensions to create in the new database. Defaults to `hstore pgcrypto citext uuid-ossp postgis pg_trgm unaccent`",
          "type": "string"
        },
        "useAzureFlex": {
          "description": "Use an Azure Flex database. defaults to false",
          "type": "boolean"
        }
      },
      "required": ["database", "pgUser"]
    },
    "job-deactivate": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgAdminUserSecretRefName": {
          "description": "Secret with admin credentials to the database server",
          "type": "string"
        },
        "database": {
          "description": "Name of the Postgres database to destroy. Defaults to environment",
          "type": "string"
        },
        "db": {
          "description": "Has a database, and use default database, true by default if `database` filled",
          "type": "boolean"
        }
      },
      "required": []
    },
    "job-drop-db": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgAdminUserSecretRefName": {
          "description": "Secret with admin credentials to the database server",
          "type": "string"
        },
        "database": {
          "description": "Name of the Postgres database to destroy.",
          "type": "string"
        },
        "databaseUser": {
          "description": "Name of the Postgres user to destroy.",
          "type": "string"
        }
      },
      "required": ["database", "databaseUser"]
    },
    "job-pg-restore": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgAdminUserSecretRefName": {
          "description": "Secret with admin credentials to the database server",
          "type": "string"
        },
        "restorePath": {
          "description": "Path to .sql file in the repo",
          "type": "string"
        },
        "mountPath": {
          "description": "Path to the backup storage mount",
          "type": "string"
        },
        "owner": {
          "description": "Change restored database owner",
          "type": "string"
        },
        "database": {
          "description": "Name of the Postgres database to restore to",
          "type": "string"
        }
      },
      "required": ["restorePath", "databaseUser"]
    },
    "job-psql": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgSecretRefName": {
          "description": "Secret with Postgresql credentials to execute the script",
          "type": "string"
        },
        "sqlFile": {
          "description": "Path to .sql file in the repo",
          "examples": ["./scripts/restore.sql"],
          "type": "string"
        }
      },
      "required": ["pgSecretRefName", "sqlFile"]
    },
    "job-seed-db": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pgSecretRefName ": {
          "description": "Secret with Postgresql credentials to execute the script",
          "type": "string"
        },
        "seedPath": {
          "description": "Path to .sql file in the repo",
          "type": "string"
        }
      },
      "required": ["pgSecretRefName", "seedPath"]
    },
    "chart": {
      "type": "object",
      "properties": {
        "~chart": {
          "description": "Base Helm Chart for this component",
          "type": "string",
          "examples": ["app", "maildev"]
        },
        "~needs": {
          "description": "Job or deployment dependencies",
          "type": "array",
          "items": {
            "type": "string"
          },
          "examples": ["[build-app]"]
        }
      }
    },
    "chart-app": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#"
      },
      "patternProperties": {
        "^\\.": { "type": ["string", "number", "boolean"] }
      },
      "properties": {
        "~chart": {
          "description": "Base Helm Chart for this component",
          "type": "string",
          "examples": ["app", "maildev"]
        },
        "~needs": {
          "description": "Job or deployment dependencies",
          "type": "array",
          "items": {
            "type": "string"
          },
          "examples": ["[build-app]"]
        },
        "image": {
          "description": "Full path to docker image",
          "examples": ["ghcr.io/socialgouv/docker/nginx:7.0.1"],
          "type": "string"
        },
        "imagePackage": {
          "description": "Name of the dockerfile on the registry",
          "type": "string"
        },
        "imageProject": {
          "description": "Optional project name in the docker registry",
          "type": "string"
        },
        "imageRepository": {
          "description": "Optional sub repository for the docker image",
          "type": "string"
        },
        "probesPath": {
          "description": "Path to application health probe. Defaults to /healthz",
          "type": "string",
          "examples": ["/healthz"]
        },
        "probesPort": {
          "description": "Port for probes calls",
          "type": ["string", "number"]
        },
        "containerPort": {
          "description": "Container port, defaults to 3000",
          "type": ["string", "number"]
        },
        "host": {
          "description": "Hostname for the deployment",
          "type": "string"
        },
        "ingress": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "description": "Ingress enable. default to true",
              "type": "boolean"
            },
            "path": {
              "description": "URL path to map the ingress to",
              "type": "string",
              "examples": ["/"]
            },
            "rewriteTarget": {
              "description": "Redirect path on the service",
              "type": "string",
              "examples": ["/$1"]
            },
            "annotations": {
              "type": "object",
              "additionalProperties": true
            }
          }
        },
        "certSecretName": {
          "description": "Name of existing SSL cert secret if any.",
          "type": "string"
        },
        "env": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "name": { "type": "string" },
              "value": { "type": "string" }
            }
          }
        },
        "envFrom": {
          "$ref": "https://raw.githubusercontent.com/ad-m/kubernetes-json-schema/master/master-standalone-strict/_definitions.json#/definitions/io.k8s.api.core.v1.Container/properties/envFrom"
        },
        "vars": { "type": "object", "additionalProperties": true },
        "volumes": {
          "$ref": "https://raw.githubusercontent.com/ad-m/kubernetes-json-schema/master/master-standalone-strict/_definitions.json#/definitions/io.k8s.api.core.v1.PodSpec/properties/volumes"
        },
        "volumeMounts": {
          "$ref": "https://raw.githubusercontent.com/ad-m/kubernetes-json-schema/master/master-standalone-strict/_definitions.json#/definitions/io.k8s.api.core.v1.Container/properties/volumeMounts"
        },
        "replicas": {
          "$ref": "https://raw.githubusercontent.com/ad-m/kubernetes-json-schema/master/master-standalone-strict/_definitions.json#/definitions/io.k8s.api.apps.v1.DeploymentSpec/properties/replicas"
        },
        "resources": {
          "$ref": "https://raw.githubusercontent.com/ad-m/kubernetes-json-schema/master/master-standalone-strict/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements"
        }
      }
    }
  }
}
